--- before/plain-root.txtar
+++ golden/generate-channel-subscriber-test.txtar
@@ -2351,4 +2351,297 @@
 	_ "cto-github.cisco.com/NFV-BU/someservice/internal/migrate/V5_0_0"
 )
+-- someservice/internal/stream/weasels/api/weasels_response_request.go --
+package api
+
+import (
+	"cto-github.cisco.com/NFV-BU/go-msx/types"
+)
+
+type WeaselsResponseRequest struct {
+	Id        types.UUID `json:"id"`
+	Timestamp types.Time `json:"timestamp"`
+}
+-- someservice/internal/stream/weasels/channel.go --
+package weasels
+
+import (
+	"context"
+	"cto-github.cisco.com/NFV-BU/go-msx/ops/streamops"
+	"cto-github.cisco.com/NFV-BU/go-msx/schema/asyncapi"
+	"cto-github.cisco.com/NFV-BU/go-msx/types"
+)
+
+// Context
+
+const contextKeyChannel = contextKeyNamed("Channel")
+
+func ContextChannel() types.ContextKeyAccessor[*streamops.Channel] {
+	return types.NewContextKeyAccessor[*streamops.Channel](contextKeyChannel)
+}
+
+// Constructor
+
+func newChannel(ctx context.Context) (*streamops.Channel, error) {
+	doc := new(asyncapi.ChannelDocumentor).
+		WithChannelItem(new(asyncapi.ChannelItem).
+			WithDescription("Description of the weasels channel."))
+
+	ch, err := streamops.NewChannel(ctx, "weasels")
+	if err != nil {
+		return nil, err
+	}
+
+	ch.WithDocumentor(doc)
+
+	return ch, nil
+}
+
+// Singleton
+
+var channel = types.NewSingleton(
+	newChannel,
+	ContextChannel)
+-- someservice/internal/stream/weasels/mock_weasels_response_request_handler_test.go --
+// Code generated by mockery v2.21.1. DO NOT EDIT.
+
+package weasels
+
+import (
+	context "context"
+
+	api "cto-github.cisco.com/NFV-BU/someservice/internal/stream/weasels/api"
+
+	mock "github.com/stretchr/testify/mock"
+)
+
+// MockWeaselsResponseRequestHandler is an autogenerated mock type for the WeaselsResponseRequestHandler type
+type MockWeaselsResponseRequestHandler struct {
+	mock.Mock
+}
+
+type MockWeaselsResponseRequestHandler_Expecter struct {
+	mock *mock.Mock
+}
+
+func (_m *MockWeaselsResponseRequestHandler) EXPECT() *MockWeaselsResponseRequestHandler_Expecter {
+	return &MockWeaselsResponseRequestHandler_Expecter{mock: &_m.Mock}
+}
+
+// OnWeaselsResponseRequest provides a mock function with given fields: ctx, payload
+func (_m *MockWeaselsResponseRequestHandler) OnWeaselsResponseRequest(ctx context.Context, payload api.WeaselsResponseRequest) error {
+	ret := _m.Called(ctx, payload)
+
+	var r0 error
+	if rf, ok := ret.Get(0).(func(context.Context, api.WeaselsResponseRequest) error); ok {
+		r0 = rf(ctx, payload)
+	} else {
+		r0 = ret.Error(0)
+	}
+
+	return r0
+}
+
+// MockWeaselsResponseRequestHandler_OnWeaselsResponseRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OnWeaselsResponseRequest'
+type MockWeaselsResponseRequestHandler_OnWeaselsResponseRequest_Call struct {
+	*mock.Call
+}
+
+// OnWeaselsResponseRequest is a helper method to define mock.On call
+//   - ctx context.Context
+//   - payload api.WeaselsResponseRequest
+func (_e *MockWeaselsResponseRequestHandler_Expecter) OnWeaselsResponseRequest(ctx interface{}, payload interface{}) *MockWeaselsResponseRequestHandler_OnWeaselsResponseRequest_Call {
+	return &MockWeaselsResponseRequestHandler_OnWeaselsResponseRequest_Call{Call: _e.mock.On("OnWeaselsResponseRequest", ctx, payload)}
+}
+
+func (_c *MockWeaselsResponseRequestHandler_OnWeaselsResponseRequest_Call) Run(run func(ctx context.Context, payload api.WeaselsResponseRequest)) *MockWeaselsResponseRequestHandler_OnWeaselsResponseRequest_Call {
+	_c.Call.Run(func(args mock.Arguments) {
+		run(args[0].(context.Context), args[1].(api.WeaselsResponseRequest))
+	})
+	return _c
+}
+
+func (_c *MockWeaselsResponseRequestHandler_OnWeaselsResponseRequest_Call) Return(_a0 error) *MockWeaselsResponseRequestHandler_OnWeaselsResponseRequest_Call {
+	_c.Call.Return(_a0)
+	return _c
+}
+
+func (_c *MockWeaselsResponseRequestHandler_OnWeaselsResponseRequest_Call) RunAndReturn(run func(context.Context, api.WeaselsResponseRequest) error) *MockWeaselsResponseRequestHandler_OnWeaselsResponseRequest_Call {
+	_c.Call.Return(run)
+	return _c
+}
+
+type mockConstructorTestingTNewMockWeaselsResponseRequestHandler interface {
+	mock.TestingT
+	Cleanup(func())
+}
+
+// NewMockWeaselsResponseRequestHandler creates a new instance of MockWeaselsResponseRequestHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
+func NewMockWeaselsResponseRequestHandler(t mockConstructorTestingTNewMockWeaselsResponseRequestHandler) *MockWeaselsResponseRequestHandler {
+	mock := &MockWeaselsResponseRequestHandler{}
+	mock.Mock.Test(t)
+
+	t.Cleanup(func() { mock.AssertExpectations(t) })
+
+	return mock
+}
+-- someservice/internal/stream/weasels/pkg.go --
+package weasels
+
+import (
+	"cto-github.cisco.com/NFV-BU/go-msx/log"
+)
+
+type contextKeyNamed string
+
+var logger = log.NewPackageLogger()
+-- someservice/internal/stream/weasels/subscriber_channel.go --
+package weasels
+
+import (
+	"context"
+	"cto-github.cisco.com/NFV-BU/go-msx/ops/streamops"
+	"cto-github.cisco.com/NFV-BU/go-msx/schema/asyncapi"
+	"cto-github.cisco.com/NFV-BU/go-msx/types"
+)
+
+// Context
+
+const contextKeyChannelSubscriber = contextKeyNamed("ChannelSubscriber")
+
+func ContextChannelSubscriber() types.ContextKeyAccessor[*streamops.ChannelSubscriber] {
+	return types.NewContextKeyAccessor[*streamops.ChannelSubscriber](contextKeyChannelSubscriber)
+}
+
+// Constructor
+
+func newChannelSubscriber(ctx context.Context) (channelSubscriber *streamops.ChannelSubscriber, err error) {
+	doc := new(asyncapi.ChannelSubscriberDocumentor).
+		WithOperation(new(asyncapi.Operation).
+			WithID("onWeaselsSubscribe").
+			WithSummary("onWeaselsSubscribe"))
+
+	ch, err := channel.Factory(ctx)
+	if err != nil {
+		return nil, err
+	}
+
+	channelSubscriber, err = streamops.NewChannelSubscriber(ctx,
+		ch,
+		"onWeaselsSubscribe",
+		types.OptionalOf("eventType"))
+	if err != nil {
+		return nil, err
+	}
+
+	channelSubscriber.AddDocumentor(doc)
+
+	return channelSubscriber, nil
+}
+
+// Singleton
+
+var channelSubscriber = types.NewSingleton(
+	newChannelSubscriber,
+	ContextChannelSubscriber,
+)
+-- someservice/internal/stream/weasels/subscriber_weasels_response_request.go --
+package weasels
+
+import (
+	"context"
+	"cto-github.cisco.com/NFV-BU/go-msx/app"
+	"cto-github.cisco.com/NFV-BU/go-msx/ops/streamops"
+	"cto-github.cisco.com/NFV-BU/go-msx/schema/asyncapi"
+	"cto-github.cisco.com/NFV-BU/go-msx/security/service"
+	"cto-github.cisco.com/NFV-BU/go-msx/types"
+	"cto-github.cisco.com/NFV-BU/someservice/internal/stream/weasels/api"
+)
+
+// Dependencies
+
+//go:generate mockery --name=WeaselsResponseRequestHandler --testonly --case=snake --inpackage --with-expecter
+
+type WeaselsResponseRequestHandler interface {
+	OnWeaselsResponseRequest(ctx context.Context, payload api.WeaselsResponseRequest) error
+}
+
+type dropWeaselsResponseRequestHandler struct{}
+
+func (n dropWeaselsResponseRequestHandler) OnWeaselsResponseRequest(ctx context.Context, payload api.WeaselsResponseRequest) error {
+	logger.Error("No handler assigned to WeaselsResponseRequest message subscription.  Dropping message.")
+	return nil
+}
+
+// Context
+
+const contextKeyWeaselsResponseRequestSubscriber = contextKeyNamed("WeaselsResponseRequestSubscriber")
+
+func ContextWeaselsResponseRequestSubscriber() types.ContextKeyAccessor[*streamops.MessageSubscriber] {
+	return types.NewContextKeyAccessor[*streamops.MessageSubscriber](contextKeyWeaselsResponseRequestSubscriber)
+}
+
+// Constructor
+
+type weaselsResponseRequestInput struct {
+	Payload api.WeaselsResponseRequest `in:"body"`
+}
+
+func newWeaselsResponseRequestSubscriber(ctx context.Context) (*streamops.MessageSubscriber, error) {
+	doc := new(asyncapi.MessageSubscriberDocumentor).
+		WithMessage(new(asyncapi.Message).
+			WithTitle("Weasels").
+			WithSummary("Weasels").
+			WithTags(
+				*asyncapi.NewTag("WeaselsResponseRequest"),
+			))
+
+	cs, err := newChannelSubscriber(ctx)
+	if err != nil {
+		return nil, err
+	}
+
+	// TODO: specify your message handler here
+	var handler WeaselsResponseRequestHandler = dropWeaselsResponseRequestHandler{}
+
+	sb, err := streamops.NewMessageSubscriberBuilder(ctx, cs, "WeaselsResponseRequest")
+	if err != nil {
+		return nil, err
+	}
+
+	svc, err := sb.
+		WithInputs(weaselsResponseRequestInput{}).
+		WithDecorator(service.DefaultServiceAccount).
+		WithHandler(
+			func(ctx context.Context, in *weaselsResponseRequestInput) error {
+				return handler.OnWeaselsResponseRequest(ctx, in.Payload)
+			},
+		).
+		WithDocumentor(doc).
+		Build()
+	if err != nil {
+		return nil, err
+	}
+
+	return svc, nil
+}
+
+// Singleton
+
+var weaselsResponseRequestSubscriber = types.NewSingleton(
+	newWeaselsResponseRequestSubscriber,
+	ContextWeaselsResponseRequestSubscriber)
+
+// Instantiate
+
+func init() {
+	app.OnCommandsEvent(
+		[]string{app.CommandRoot, app.CommandAsyncApi},
+		app.EventStart,
+		app.PhaseBefore,
+		func(ctx context.Context) (err error) {
+			_, err = weaselsResponseRequestSubscriber.Factory(ctx)
+			return
+		})
+}
 -- someservice/local/someservice.remote.yml --
 remote.service.address: 192.168.1.2
