--- before/plain-root.txtar
+++ golden/generate-topic-subscriber-test.txtar
@@ -1473,4 +1473,5 @@
 	"cto-github.cisco.com/NFV-BU/go-msx/app"
 	_ "cto-github.cisco.com/NFV-BU/someservice/internal/migrate"
+	_ "cto-github.cisco.com/NFV-BU/someservice/internal/stream/weasels"
 )
 
@@ -2179,5 +2180,5 @@
 	github.com/Rican7/retry v0.3.1 // indirect
 	github.com/Shopify/sarama v1.33.0 // indirect
-	github.com/ThreeDotsLabs/watermill v1.1.1 // indirect
+	github.com/ThreeDotsLabs/watermill v1.2.0 // indirect
 	github.com/ThreeDotsLabs/watermill-kafka/v2 v2.2.2 // indirect
 	github.com/ThreeDotsLabs/watermill-sql v1.3.4 // indirect
@@ -2186,6 +2187,6 @@
 	github.com/beorn7/perks v1.0.1 // indirect
 	github.com/bmatcuk/doublestar v1.1.5 // indirect
-	github.com/cenkalti/backoff/v3 v3.0.0 // indirect
-	github.com/cespare/xxhash/v2 v2.1.2 // indirect
+	github.com/cenkalti/backoff/v3 v3.2.2 // indirect
+	github.com/cespare/xxhash/v2 v2.2.0 // indirect
 	github.com/davecgh/go-spew v1.1.1 // indirect
 	github.com/dgryski/go-rendezvous v0.0.0-20200823014737-9f7001d12a5f // indirect
@@ -2253,5 +2254,5 @@
 	github.com/mattn/go-isatty v0.0.16 // indirect
 	github.com/mattn/go-jsonpointer v0.0.1 // indirect
-	github.com/matttproud/golang_protobuf_extensions v1.0.1 // indirect
+	github.com/matttproud/golang_protobuf_extensions v1.0.4 // indirect
 	github.com/minghsu0107/watermill-redistream v1.0.0 // indirect
 	github.com/mitchellh/go-homedir v1.1.0 // indirect
@@ -2268,8 +2269,8 @@
 	github.com/pkg/errors v0.9.1 // indirect
 	github.com/pmezard/go-difflib v1.0.0 // indirect
-	github.com/prometheus/client_golang v1.13.0 // indirect
-	github.com/prometheus/client_model v0.2.0 // indirect
-	github.com/prometheus/common v0.37.0 // indirect
-	github.com/prometheus/procfs v0.8.0 // indirect
+	github.com/prometheus/client_golang v1.14.0 // indirect
+	github.com/prometheus/client_model v0.3.0 // indirect
+	github.com/prometheus/common v0.39.0 // indirect
+	github.com/prometheus/procfs v0.9.0 // indirect
 	github.com/radovskyb/watcher v1.0.7 // indirect
 	github.com/rcrowley/go-metrics v0.0.0-20201227073835-cf1acfcdf475 // indirect
@@ -2301,5 +2302,5 @@
 	golang.org/x/mod v0.8.0 // indirect
 	golang.org/x/net v0.8.0 // indirect
-	golang.org/x/oauth2 v0.0.0-20220808172628-8227340efae7 // indirect
+	golang.org/x/oauth2 v0.3.0 // indirect
 	golang.org/x/sys v0.6.0 // indirect
 	golang.org/x/text v0.8.0 // indirect
@@ -2351,4 +2352,126 @@
 	_ "cto-github.cisco.com/NFV-BU/someservice/internal/migrate/V5_0_0"
 )
+-- someservice/internal/stream/weasels/mock_subscriber_weasel.go --
+// Code generated by mockery v2.21.1. DO NOT EDIT.
+
+package weasels
+
+import (
+	context "context"
+
+	api "cto-github.cisco.com/NFV-BU/someservice/pkg/api"
+
+	mock "github.com/stretchr/testify/mock"
+)
+
+// MockWeaselSubscriber is an autogenerated mock type for the WeaselSubscriberApi type
+type MockWeaselSubscriber struct {
+	mock.Mock
+}
+
+// OnWeaselMessage provides a mock function with given fields: ctx, message
+func (_m *MockWeaselSubscriber) OnWeaselMessage(ctx context.Context, message api.WeaselMessage) error {
+	ret := _m.Called(ctx, message)
+
+	var r0 error
+	if rf, ok := ret.Get(0).(func(context.Context, api.WeaselMessage) error); ok {
+		r0 = rf(ctx, message)
+	} else {
+		r0 = ret.Error(0)
+	}
+
+	return r0
+}
+
+type mockConstructorTestingTNewMockWeaselSubscriber interface {
+	mock.TestingT
+	Cleanup(func())
+}
+
+// NewMockWeaselSubscriber creates a new instance of MockWeaselSubscriber. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
+func NewMockWeaselSubscriber(t mockConstructorTestingTNewMockWeaselSubscriber) *MockWeaselSubscriber {
+	mock := &MockWeaselSubscriber{}
+	mock.Mock.Test(t)
+
+	t.Cleanup(func() { mock.AssertExpectations(t) })
+
+	return mock
+}
+-- someservice/internal/stream/weasels/pkg.go --
+package weasels
+
+import "cto-github.cisco.com/NFV-BU/go-msx/log"
+
+type contextKey string
+
+var logger = log.NewLogger("someservice.internal.stream.weasels")
+
+const (
+	topicWeasel = "WEASEL_TOPIC"
+)
+-- someservice/internal/stream/weasels/subscriber_weasel.go --
+//go:generate mockery --inpackage --name=WeaselSubscriberApi --structname=MockWeaselSubscriber --filename mock_subscriber_weasel.go
+package weasels
+
+import (
+	"context"
+	"cto-github.cisco.com/NFV-BU/go-msx/app"
+	"cto-github.cisco.com/NFV-BU/go-msx/stream"
+	"cto-github.cisco.com/NFV-BU/someservice/pkg/api"
+	"encoding/json"
+	"github.com/ThreeDotsLabs/watermill/message"
+	"github.com/pkg/errors"
+)
+
+const (
+	contextKeyWeaselSubscriber = contextKey("WeaselSubscriber")
+)
+
+type WeaselSubscriberApi interface {
+	OnWeaselMessage(ctx context.Context, message api.WeaselMessage) error
+}
+
+type weaselSubscriber struct {
+	// TODO : Declare fields
+}
+
+func (s *weaselSubscriber) OnWeaselMessage(ctx context.Context, message api.WeaselMessage) error {
+	logger.WithContext(ctx).Debugf("Handling message for weasel %q", message.Id.String())
+	// TODO : Implement
+	return nil
+}
+
+func newWeaselSubscriber(ctx context.Context) WeaselSubscriberApi {
+	service := WeaselSubscriberFromContext(ctx)
+	if service == nil {
+		service = &weaselSubscriber{}
+	}
+	return service
+}
+
+func WeaselSubscriberFromContext(ctx context.Context) WeaselSubscriberApi {
+	value, _ := ctx.Value(contextKeyWeaselSubscriber).(WeaselSubscriberApi)
+	return value
+}
+
+func ContextWithWeaselSubscriber(ctx context.Context, subscriber WeaselSubscriberApi) context.Context {
+	return context.WithValue(ctx, contextKeyWeaselSubscriber, subscriber)
+}
+
+func init() {
+	app.OnRootEvent(app.EventStart, app.PhaseDuring, func(ctx context.Context) error {
+		subscriber := newWeaselSubscriber(ctx)
+		return stream.AddListener(topicWeasel, func(msg *message.Message) error {
+			ctx := msg.Context()
+			var weaselMessage api.WeaselMessage
+			if err := json.Unmarshal(msg.Payload, &weaselMessage); err != nil {
+				err = errors.Wrap(err, "Failed to decode weasel message")
+				logger.WithError(err).WithContext(ctx).Errorf("Invalid message received on topic %s", topicWeasel)
+				return err
+			}
+			return subscriber.OnWeaselMessage(ctx, weaselMessage)
+		})
+	})
+}
 -- someservice/local/someservice.remote.yml --
 remote.service.address: 192.168.1.2
@@ -2510,4 +2633,13 @@
 
 </project>
+-- someservice/pkg/api/weasel_message.go --
+package api
+
+import "cto-github.cisco.com/NFV-BU/go-msx/types"
+
+type WeaselMessage struct {
+	Id   types.UUID `json:"id"`
+	Data string     `json:"data"`
+}
 -- someservice/skaffold.yaml --
 apiVersion: skaffold/v3
