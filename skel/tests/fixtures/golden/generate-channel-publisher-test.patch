--- before/plain-root.txtar
+++ golden/generate-channel-publisher-test.txtar
@@ -2351,4 +2351,279 @@
 	_ "cto-github.cisco.com/NFV-BU/someservice/internal/migrate/V5_0_0"
 )
+-- someservice/internal/stream/weasels/api/weasels_request_response.go --
+package api
+
+import (
+	"cto-github.cisco.com/NFV-BU/go-msx/types"
+)
+
+type WeaselsRequestResponse struct {
+	Id        types.UUID `json:"id"`
+	Timestamp types.Time `json:"timestamp"`
+}
+-- someservice/internal/stream/weasels/channel.go --
+package weasels
+
+import (
+	"context"
+	"cto-github.cisco.com/NFV-BU/go-msx/ops/streamops"
+	"cto-github.cisco.com/NFV-BU/go-msx/schema/asyncapi"
+	"cto-github.cisco.com/NFV-BU/go-msx/types"
+)
+
+// Context
+
+const contextKeyChannel = contextKeyNamed("Channel")
+
+func ContextChannel() types.ContextKeyAccessor[*streamops.Channel] {
+	return types.NewContextKeyAccessor[*streamops.Channel](contextKeyChannel)
+}
+
+// Constructor
+
+func newChannel(ctx context.Context) (*streamops.Channel, error) {
+	doc := new(asyncapi.ChannelDocumentor).
+		WithChannelItem(new(asyncapi.ChannelItem).
+			WithDescription("Description of the weasels channel."))
+
+	ch, err := streamops.NewChannel(ctx, "weasels")
+	if err != nil {
+		return nil, err
+	}
+
+	ch.WithDocumentor(doc)
+
+	return ch, nil
+}
+
+// Singleton
+
+var channel = types.NewSingleton(
+	newChannel,
+	ContextChannel)
+-- someservice/internal/stream/weasels/mock_weasels_request_response_publisher_test.go --
+// Code generated by mockery v2.21.1. DO NOT EDIT.
+
+package weasels
+
+import (
+	context "context"
+
+	api "cto-github.cisco.com/NFV-BU/someservice/internal/stream/weasels/api"
+
+	mock "github.com/stretchr/testify/mock"
+)
+
+// MockWeaselsRequestResponsePublisher is an autogenerated mock type for the WeaselsRequestResponsePublisher type
+type MockWeaselsRequestResponsePublisher struct {
+	mock.Mock
+}
+
+type MockWeaselsRequestResponsePublisher_Expecter struct {
+	mock *mock.Mock
+}
+
+func (_m *MockWeaselsRequestResponsePublisher) EXPECT() *MockWeaselsRequestResponsePublisher_Expecter {
+	return &MockWeaselsRequestResponsePublisher_Expecter{mock: &_m.Mock}
+}
+
+// PublishWeaselsRequestResponse provides a mock function with given fields: ctx, payload
+func (_m *MockWeaselsRequestResponsePublisher) PublishWeaselsRequestResponse(ctx context.Context, payload api.WeaselsRequestResponse) error {
+	ret := _m.Called(ctx, payload)
+
+	var r0 error
+	if rf, ok := ret.Get(0).(func(context.Context, api.WeaselsRequestResponse) error); ok {
+		r0 = rf(ctx, payload)
+	} else {
+		r0 = ret.Error(0)
+	}
+
+	return r0
+}
+
+// MockWeaselsRequestResponsePublisher_PublishWeaselsRequestResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PublishWeaselsRequestResponse'
+type MockWeaselsRequestResponsePublisher_PublishWeaselsRequestResponse_Call struct {
+	*mock.Call
+}
+
+// PublishWeaselsRequestResponse is a helper method to define mock.On call
+//   - ctx context.Context
+//   - payload api.WeaselsRequestResponse
+func (_e *MockWeaselsRequestResponsePublisher_Expecter) PublishWeaselsRequestResponse(ctx interface{}, payload interface{}) *MockWeaselsRequestResponsePublisher_PublishWeaselsRequestResponse_Call {
+	return &MockWeaselsRequestResponsePublisher_PublishWeaselsRequestResponse_Call{Call: _e.mock.On("PublishWeaselsRequestResponse", ctx, payload)}
+}
+
+func (_c *MockWeaselsRequestResponsePublisher_PublishWeaselsRequestResponse_Call) Run(run func(ctx context.Context, payload api.WeaselsRequestResponse)) *MockWeaselsRequestResponsePublisher_PublishWeaselsRequestResponse_Call {
+	_c.Call.Run(func(args mock.Arguments) {
+		run(args[0].(context.Context), args[1].(api.WeaselsRequestResponse))
+	})
+	return _c
+}
+
+func (_c *MockWeaselsRequestResponsePublisher_PublishWeaselsRequestResponse_Call) Return(_a0 error) *MockWeaselsRequestResponsePublisher_PublishWeaselsRequestResponse_Call {
+	_c.Call.Return(_a0)
+	return _c
+}
+
+func (_c *MockWeaselsRequestResponsePublisher_PublishWeaselsRequestResponse_Call) RunAndReturn(run func(context.Context, api.WeaselsRequestResponse) error) *MockWeaselsRequestResponsePublisher_PublishWeaselsRequestResponse_Call {
+	_c.Call.Return(run)
+	return _c
+}
+
+type mockConstructorTestingTNewMockWeaselsRequestResponsePublisher interface {
+	mock.TestingT
+	Cleanup(func())
+}
+
+// NewMockWeaselsRequestResponsePublisher creates a new instance of MockWeaselsRequestResponsePublisher. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
+func NewMockWeaselsRequestResponsePublisher(t mockConstructorTestingTNewMockWeaselsRequestResponsePublisher) *MockWeaselsRequestResponsePublisher {
+	mock := &MockWeaselsRequestResponsePublisher{}
+	mock.Mock.Test(t)
+
+	t.Cleanup(func() { mock.AssertExpectations(t) })
+
+	return mock
+}
+-- someservice/internal/stream/weasels/pkg.go --
+package weasels
+
+import (
+	"cto-github.cisco.com/NFV-BU/go-msx/log"
+)
+
+type contextKeyNamed string
+
+var logger = log.NewPackageLogger()
+-- someservice/internal/stream/weasels/publisher_channel.go --
+package weasels
+
+import (
+	"context"
+	"cto-github.cisco.com/NFV-BU/go-msx/ops/streamops"
+	"cto-github.cisco.com/NFV-BU/go-msx/schema/asyncapi"
+	"cto-github.cisco.com/NFV-BU/go-msx/types"
+)
+
+const contextKeyChannelPublisher = contextKeyNamed("ChannelPublisher")
+
+func contextChannelPublisher() types.ContextKeyAccessor[*streamops.ChannelPublisher] {
+	return types.NewContextKeyAccessor[*streamops.ChannelPublisher](contextKeyChannelPublisher)
+}
+
+func newChannelPublisher(ctx context.Context) (svc *streamops.ChannelPublisher, err error) {
+	svc = contextChannelPublisher().Get(ctx)
+	if svc == nil {
+		var ch *streamops.Channel
+		ch, err = channel.Factory(ctx)
+		if err != nil {
+			return nil, err
+		}
+
+		svc, err = streamops.NewChannelPublisher(ctx, ch, "onWeaselsPublish")
+		if err != nil {
+			return nil, err
+		}
+
+		doc := new(asyncapi.ChannelPublisherDocumentor).
+			WithOperation(new(asyncapi.Operation).
+				WithID("onWeaselsPublish").
+				WithSummary("onWeaselsPublish"))
+		svc.AddDocumentor(doc)
+	}
+
+	return svc, nil
+}
+-- someservice/internal/stream/weasels/publisher_weasels_request_response.go --
+package weasels
+
+import (
+	"context"
+	"cto-github.cisco.com/NFV-BU/go-msx/app"
+	"cto-github.cisco.com/NFV-BU/go-msx/ops/streamops"
+	"cto-github.cisco.com/NFV-BU/go-msx/schema/asyncapi"
+	"cto-github.cisco.com/NFV-BU/go-msx/types"
+
+	api "cto-github.cisco.com/NFV-BU/someservice/internal/stream/weasels/api"
+)
+
+// Dependencies
+
+//go:generate mockery --name=WeaselsRequestResponsePublisher --testonly --case=snake --inpackage --with-expecter
+
+type WeaselsRequestResponsePublisher interface {
+	PublishWeaselsRequestResponse(ctx context.Context, payload api.WeaselsRequestResponse) error
+}
+
+// Context
+
+const contextKeyWeaselsRequestResponsePublisher = contextKeyNamed("WeaselsRequestResponsePublisher")
+
+func ContextWeaselsRequestResponsePublisher() types.ContextKeyAccessor[WeaselsRequestResponsePublisher] {
+	return types.NewContextKeyAccessor[WeaselsRequestResponsePublisher](contextKeyWeaselsRequestResponsePublisher)
+}
+
+// Implementation
+
+type weaselsRequestResponsePublisher struct {
+	messagePublisher *streamops.MessagePublisher
+}
+
+type weaselsRequestResponseOutput struct {
+	Payload api.WeaselsRequestResponse `out:"body"`
+}
+
+func (p weaselsRequestResponsePublisher) PublishWeaselsRequestResponse(ctx context.Context, payload api.WeaselsRequestResponse) error {
+	return p.messagePublisher.Publish(ctx, weaselsRequestResponseOutput{
+		Payload: payload,
+	})
+}
+
+// Constructor
+
+func NewWeaselsRequestResponsePublisher(ctx context.Context) (WeaselsRequestResponsePublisher, error) {
+	svc := ContextWeaselsRequestResponsePublisher().Get(ctx)
+	if svc == nil {
+		doc := new(asyncapi.MessagePublisherDocumentor).
+			WithMessage(new(asyncapi.Message).
+				WithTitle("Weasels Request").
+				WithSummary("Notifies subscribers of Weasels Request.").
+				WithTags(
+					*asyncapi.NewTag("weaselsRequestResponse"),
+				))
+
+		cp, err := newChannelPublisher(ctx)
+		if err != nil {
+			return nil, err
+		}
+
+		mpb, err := streamops.NewMessagePublisherBuilder(ctx, cp, "WeaselsRequestResponse", weaselsRequestResponseOutput{})
+
+		mp, err := mpb.
+			WithDocumentor(doc).
+			Build()
+		if err != nil {
+			return nil, err
+		}
+
+		svc = &weaselsRequestResponsePublisher{
+			messagePublisher: mp,
+		}
+	}
+
+	return svc, nil
+}
+
+// Instantiation
+
+func init() {
+	app.OnCommandsEvent(
+		[]string{app.CommandRoot, app.CommandAsyncApi},
+		app.EventStart,
+		app.PhaseBefore,
+		func(ctx context.Context) (err error) {
+			_, err = NewWeaselsRequestResponsePublisher(ctx)
+			return
+		})
+}
 -- someservice/local/someservice.remote.yml --
 remote.service.address: 192.168.1.2
