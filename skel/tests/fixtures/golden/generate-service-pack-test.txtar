-- .github/PULL_REQUEST_TEMPLATE.md --
### Description
_A human-readable description on what this pull request does_

### New Behaviour
_Any new behaviour you would like to specifically call out_

### Tests Ran
_What test or checks you did you do to locally verify your code_
[ ] Manual Testing
[ ] Unit Tests
[ ] Integration Tests
[ ] Other - _Provide details of other testing you performed_

### Production Testing
_Provide details of anything you couldn't test that needs a production-like environment to test_

### Any Related PRs?
_Are there any PRs in or outside this repository that are related to this change_
-- .gitignore --
# Compiled Object files, Static and Dynamic libs (Shared Objects)
*.o
*.a
*.so

# Folders
_obj
_test

# Architecture specific extensions/prefixes
*.[568vq]
[568vq].out

*.cgo1.go
*.cgo2.c
_cgo_defun.c
_cgo_gotypes.go
_cgo_export.*

_testmain.go

*.exe
*.test
*.prof

*.ipr
*.iml
*.iws

.idea/
.vscode/
dist/
vendor/
local/
test/
deployments/kubernetes/someservice_variables.yml
deployments/someservice_variables.yml
-- .idea/modules.xml --
<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
    <component name="ProjectModuleManager">
        <modules>
            <module fileurl="file://$PROJECT_DIR$/.idea/someservice.iml" filepath="$PROJECT_DIR$/.idea/someservice.iml" />
        </modules>
    </component>
</project>
-- .idea/runConfigurations/make_clean.xml --
<component name="ProjectRunConfigurationManager">
    <configuration name="make clean" type="MAKEFILE_TARGET_RUN_CONFIGURATION" factoryName="Makefile" default="false" nameIsGenerated="true">
        <makefile filename="$PROJECT_DIR$/Makefile" target="clean" workingDirectory="" arguments="">
            <envs />
        </makefile>
        <method v="2" />
    </configuration>
</component>
-- .idea/runConfigurations/make_dist.xml --
<component name="ProjectRunConfigurationManager">
    <configuration name="make dist" type="MAKEFILE_TARGET_RUN_CONFIGURATION" factoryName="Makefile" default="false" nameIsGenerated="true">
        <makefile filename="$PROJECT_DIR$/Makefile" target="dist" workingDirectory="" arguments="">
            <envs />
        </makefile>
        <method v="2" />
    </configuration>
</component>
-- .idea/runConfigurations/make_docker.xml --
<component name="ProjectRunConfigurationManager">
    <configuration name="make docker" type="MAKEFILE_TARGET_RUN_CONFIGURATION" factoryName="Makefile" default="false" nameIsGenerated="true">
        <makefile filename="$PROJECT_DIR$/Makefile" target="docker" workingDirectory="" arguments="">
            <envs />
        </makefile>
        <method v="2" />
    </configuration>
</component>
-- .idea/runConfigurations/make_docker_publish.xml --
<component name="ProjectRunConfigurationManager">
    <configuration name="make docker-publish" type="MAKEFILE_TARGET_RUN_CONFIGURATION" factoryName="Makefile" default="false" nameIsGenerated="true">
        <makefile filename="$PROJECT_DIR$/Makefile" target="docker-publish" workingDirectory="" arguments="">
            <envs />
        </makefile>
        <method v="2" />
    </configuration>
</component>
-- .idea/runConfigurations/make_precommit.xml --
<component name="ProjectRunConfigurationManager">
    <configuration name="make precommit" type="MAKEFILE_TARGET_RUN_CONFIGURATION" factoryName="Makefile" default="false" nameIsGenerated="true">
        <makefile filename="$PROJECT_DIR$/Makefile" target="precommit" workingDirectory="" arguments="">
            <envs />
        </makefile>
        <method v="2" />
    </configuration>
</component>
-- .idea/runConfigurations/make_test.xml --
<component name="ProjectRunConfigurationManager">
    <configuration name="make test" type="MAKEFILE_TARGET_RUN_CONFIGURATION" factoryName="Makefile" default="false" nameIsGenerated="true">
        <makefile filename="$PROJECT_DIR$/Makefile" target="test" workingDirectory="" arguments="">
            <envs />
        </makefile>
        <method v="2" />
    </configuration>
</component>
-- .idea/runConfigurations/someservice__local_.xml --
<component name="ProjectRunConfigurationManager">
    <configuration name="someservice (local)" default="false" type="GoApplicationRunConfiguration"
                   factoryName="Go Application" nameIsGenerated="true">
        <module name="someservice"/>
        <working_directory value="$PROJECT_DIR$/cmd/app"/>
        <go_parameters value=""/>
        <parameters value=""/>
        <kind value="FILE"/>
        <filePath value="$PROJECT_DIR$/cmd/app/main.go"/>
        <package value="cto-github.cisco.com/NFV-BU/someservice"/>
        <directory value="$PROJECT_DIR$"/>
        <method v="2"/>
    </configuration>
</component>
-- .idea/runConfigurations/someservice__remote_.xml --
<component name="ProjectRunConfigurationManager">
    <configuration name="someservice (remote)" default="false" type="GoApplicationRunConfiguration"
                   factoryName="Go Application" nameIsGenerated="true">
        <module name="someservice"/>
        <working_directory value="$PROJECT_DIR$/cmd/app"/>
        <go_parameters value=""/>
        <parameters value="--config.path $PROJECT_DIR$/local --profile remote"/>
        <kind value="FILE"/>
        <filePath value="$PROJECT_DIR$/cmd/app/main.go"/>
        <package value="cto-github.cisco.com/NFV-BU/someservice"/>
        <directory value="$PROJECT_DIR$"/>
        <method v="2"/>
    </configuration>
</component>
-- .idea/runConfigurations/someservice_migrate__local_.xml --
<component name="ProjectRunConfigurationManager">
    <configuration name="someservice migrate (local)" default="false" type="GoApplicationRunConfiguration"
                   factoryName="Go Application" nameIsGenerated="true">
        <module name="someservice"/>
        <working_directory value="$PROJECT_DIR$/cmd/app"/>
        <go_parameters value=""/>
        <parameters value="migrate"/>
        <kind value="FILE"/>
        <filePath value="$PROJECT_DIR$/cmd/app/main.go"/>
        <package value="cto-github.cisco.com/NFV-BU/someservice"/>
        <directory value="$PROJECT_DIR$"/>
        <method v="2"/>
    </configuration>
</component>
-- .idea/runConfigurations/someservice_migrate__remote_.xml --
<component name="ProjectRunConfigurationManager">
    <configuration name="someservice migrate (remote)" default="false" type="GoApplicationRunConfiguration"
                   factoryName="Go Application" nameIsGenerated="true">
        <module name="someservice"/>
        <working_directory value="$PROJECT_DIR$/cmd/app"/>
        <go_parameters value=""/>
        <parameters value="migrate --config.path $PROJECT_DIR$/local --profile remote"/>
        <kind value="FILE"/>
        <filePath value="$PROJECT_DIR$/cmd/app/main.go"/>
        <package value="cto-github.cisco.com/NFV-BU/someservice"/>
        <directory value="$PROJECT_DIR$"/>
        <method v="2"/>
    </configuration>
</component>
-- .idea/runConfigurations/someservice_populate__local_.xml --
<component name="ProjectRunConfigurationManager">
    <configuration name="someservice populate (local)" default="false" type="GoApplicationRunConfiguration"
                   factoryName="Go Application" nameIsGenerated="true">
        <module name="someservice"/>
        <working_directory value="$PROJECT_DIR$/cmd/app"/>
        <go_parameters value=""/>
        <parameters value="populate"/>
        <kind value="FILE"/>
        <filePath value="$PROJECT_DIR$/cmd/app/main.go"/>
        <package value="cto-github.cisco.com/NFV-BU/someservice"/>
        <directory value="$PROJECT_DIR$"/>
        <method v="2"/>
    </configuration>
</component>
-- .idea/runConfigurations/someservice_populate__remote_.xml --
<component name="ProjectRunConfigurationManager">
    <configuration name="someservice populate (remote)" default="false" type="GoApplicationRunConfiguration"
                   factoryName="Go Application" nameIsGenerated="true">
        <module name="someservice"/>
        <working_directory value="$PROJECT_DIR$/cmd/app"/>
        <go_parameters value=""/>
        <parameters value="populate --config.path $PROJECT_DIR$/local --profile remote"/>
        <kind value="FILE"/>
        <filePath value="$PROJECT_DIR$/cmd/app/main.go"/>
        <package value="cto-github.cisco.com/NFV-BU/someservice"/>
        <directory value="$PROJECT_DIR$"/>
        <method v="2"/>
    </configuration>
</component>
-- .idea/someservice.iml --
<?xml version="1.0" encoding="UTF-8"?>
<module type="WEB_MODULE" version="4">
  <component name="Go" enabled="true" />
  <component name="NewModuleRootManager">
    <content url="file://$MODULE_DIR$" />
    <orderEntry type="inheritedJdk" />
    <orderEntry type="sourceFolder" forTests="false" />
  </component>
</module>
-- .idea/vcs.xml --
<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
    <component name="VcsDirectoryMappings">
        <mapping directory="$PROJECT_DIR$" vcs="Git" />
    </component>
</project>
-- .idea/workspace.xml --
<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="GOROOT" path="/usr/local/go" />
  <component name="GoLibraries">
    <option name="indexEntireGoPath" value="false" />
  </component>
  <component name="Git.Settings">
    <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
  </component>
  <component name="VgoProject">
    <integration-enabled>true</integration-enabled>
    <proxy>direct</proxy>
  </component>
</project>
-- .skel.json --
{
    "generator": "app",
    "targetParent": "/Users/andrewpr/dev/tmptst2",
    "appName": "someservice",
    "appUUID": "",
    "appDisplayName": "Some Microservice",
    "appDescription": "Does Something",
    "serverPort": 9999,
    "debugPort": 40000,
    "serverContextPath": "/some",
    "appVersion": "5.0.0",
    "repository": "cockroach",
    "protocol": "",
    "serviceType": "",
    "deploymentGroup": "someservice",
    "kubernetesGroup": "platformms",
    "slackChannel": "go-msx-build",
    "trunk": "main",
    "imageFile": "msx.png"
}
-- .vscode/launch.json --
{
  "version": "0.2.0",
  "configurations": [
    {
      "name": "someservice (local)",
      "type": "go",
      "request": "launch",
      "mode": "auto",
      "program": "${workspaceRoot}/cmd/app/main.go",
      "env": {},
      "args": [],
      "cwd": "${workspaceRoot}/cmd/app"
    },
    {
      "name": "someservice migrate (local)",
      "type": "go",
      "request": "launch",
      "mode": "auto",
      "program": "${workspaceRoot}/cmd/app/main.go",
      "env": {},
      "args": [
        "migrate"
      ],
      "cwd": "${workspaceRoot}/cmd/app"
    },
    {
      "name": "someservice populate (local)",
      "type": "go",
      "request": "launch",
      "mode": "auto",
      "program": "${workspaceRoot}/cmd/app/main.go",
      "env": {},
      "args": [
        "populate"
      ],
      "cwd": "${workspaceRoot}/cmd/app"
    },
    {
      "name": "someservice (remote)",
      "type": "go",
      "request": "launch",
      "mode": "auto",
      "program": "${workspaceRoot}/cmd/app/main.go",
      "env": {},
      "args": [
        "--config.path=${workspaceRoot}/local",
        "--profile=remote"
      ],
      "cwd": "${workspaceRoot}/cmd/app"
    },
    {
      "name": "someservice migrate (remote)",
      "type": "go",
      "request": "launch",
      "mode": "auto",
      "program": "${workspaceRoot}/cmd/app/main.go",
      "env": {},
      "args": [
        "migrate",
        "--config.path=${workspaceRoot}/local",
        "--profile=remote"
      ],
      "cwd": "${workspaceRoot}/cmd/app"
    },
    {
      "name": "someservice populate (remote)",
      "type": "go",
      "request": "launch",
      "mode": "auto",
      "program": "${workspaceRoot}/cmd/app/main.go",
      "env": {},
      "args": [
        "populate",
        "--config.path=${workspaceRoot}/local",
        "--profile=remote"
      ],
      "cwd": "${workspaceRoot}/cmd/app"
    }
  ]
}
-- .vscode/tasks.json --
{
  "version": "2.0.0",
  "tasks": [
    {
      "label": "make dist",
      "group": {
        "kind": "build",
        "isDefault": true
      },
      "command": "make",
      "type": "shell",
      "options": {
        "cwd": "${workspaceRoot}"
      },
      "args": [
        "dist"
      ],
      "presentation": {
        "reveal": "always",
        "clear": true
      }
    },
    {
      "label": "make test",
      "group": {
        "kind": "test",
        "isDefault": true
      },
      "command": "make",
      "type": "shell",
      "options": {
        "cwd": "${workspaceRoot}"
      },
      "args": [
        "test"
      ],
      "presentation": {
        "reveal": "always",
        "clear": true
      }
    },
    {
      "label": "make docker",
      "group": "build",
      "command": "make",
      "type": "shell",
      "options": {
        "cwd": "${workspaceRoot}"
      },
      "args": [
        "docker"
      ],
      "presentation": {
        "reveal": "always",
        "clear": true
      }
    },
    {
      "label": "make precommit",
      "group": "none",
      "command": "make",
      "type": "shell",
      "options": {
        "cwd": "${workspaceRoot}"
      },
      "args": [
        "precommit"
      ],
      "presentation": {
        "reveal": "always",
        "clear": true
      }
    },
    {
      "label": "make docker-publish",
      "group": "build",
      "command": "make",
      "type": "shell",
      "options": {
        "cwd": "${workspaceRoot}"
      },
      "args": [
        "docker-publish"
      ],
      "presentation": {
        "reveal": "always",
        "clear": true
      }
    },
    {
      "label": "make publish",
      "group": "build",
      "command": "make",
      "type": "shell",
      "options": {
        "cwd": "${workspaceRoot}"
      },
      "args": [
        "publish"
      ],
      "presentation": {
        "reveal": "always",
        "clear": true
      }
    },
    {
      "label": "swagger",
      "command": "open",
      "args": [
        "http://localhost:9999/some/swagger"
      ],
      "problemMatcher": []
    }
  ]
}
-- Makefile --
BUILDER = go run $(BUILDER_FLAGS) cmd/build/build.go --config cmd/build/build.yml $(BUILD_FLAGS)

.PHONY: all deps vet test dist debug dist-debug assemblies manifest package package-publish package-deploy
.PHONY: docker docker-debug docker-push docker-publish publish clean generate precommit tag
.PHONY: update-go-msx update-go-msx-build update-go-msx-beats
.PHONY: verify-contract openapi-generate openapi-compare

all: clean deps vet test docker assemblies deployment manifest

help: ## Show this help
	@grep -E '^[a-zA-Z0-9_-]+:.*?## .*$$' $(MAKEFILE_LIST) \
	| sed -n 's/^\(.*\): \(.*\)##\(.*\)/\1\3/p' \
	| sed -n 's/^\([^ ]*\) \(.*\)$$/\1,\2/p' \
	| column -t  -s ',' \
	| sort

deps: ## Install dependencies
	go mod download

vet:  ## Use go vet to validate sources
	$(BUILDER) go-vet

test: ## Execute unit tests
	$(BUILDER) download-test-deps
	$(BUILDER) execute-unit-tests

dist: ## Build all outputs required for a container image
	$(BUILDER) generate-build-info
	$(BUILDER) install-executable-configs
	$(BUILDER) install-resources
	$(BUILDER) install-dependency-configs
	$(BUILDER) install-swagger-ui
	$(BUILDER) install-asyncapi-ui
	$(BUILDER) build-executable
	$(BUILDER) download-seccomp-dependencies
	$(BUILDER) generate-seccomp-profile

debug: dist ## Build a debug executable
	$(BUILDER) build-debug-executable

dist-debug: ## Build all outputs required for a debug container image
	$(BUILDER) generate-build-info
	$(BUILDER) install-executable-configs
	$(BUILDER) install-resources
	$(BUILDER) install-dependency-configs
	$(BUILDER) build-debug-executable

docker-push:
	$(BUILDER) docker-push

deployment: ## Generate the installer deployment variables
	$(BUILDER) generate-deployment-variables

assemblies: ## Generate supplemental artifacts
	$(BUILDER) build-assemblies

manifest: ## Generate the installer manifest
	$(BUILDER) build-installer-manifest

package: ## Generate an SLM package
	$(BUILDER) build-package

package-publish: all ## Publish this service as an SLM package to S3
	$(BUILDER) publish-package

package-deploy: ## Deploy this service using SLM to an MSX instance
	$(BUILDER) deploy-package

docker: ## Generate a docker image for this service
	go mod vendor
	$(BUILDER) docker-build

docker-debug: ## Generate a debugging docker image for this service
	go mod vendor
	$(BUILDER) docker-build-debug

docker-publish: docker ## Publish a docker image for this service
	$(BUILDER) docker-push

publish: ## Publish all artifacts required for the installer
	$(BUILDER) docker-push
	$(BUILDER) publish-binaries
	$(BUILDER) publish-installer-manifest

clean: ## Remove any temporary build outputs
	rm -Rf dist
	rm -Rf vendor

generate: ## Execute code generation
	$(BUILDER) download-generate-deps
	$(BUILDER) generate

precommit: generate ## Ensure the code is ready for committing to version control
	$(BUILDER) go-fmt

tag: ## Tag the repository with a new PATCH version number
	$(BUILDER) git-tag

update-go-msx: ## Update the go-msx library dependency to the latest version
	go get cto-github.cisco.com/NFV-BU/go-msx
	go mod tidy

update-go-msx-build: ## Update the go-msx-build library dependency to the latest version
	go get cto-github.cisco.com/NFV-BU/go-msx-build
	go mod tidy

update-go-msx-populator: ## Update the go-msx-populator library dependency to the latest version
	go get cto-github.cisco.com/NFV-BU/go-msx-populator
	go mod tidy

deploy-jenkins-job: ## Upload a standard Jenkins build job to MSX Jenkins
	$(BUILDER) deploy-jenkins-job

deploy-github-repo: ## Configure a standard github repository
	$(BUILDER) deploy-github-repo


verify-contract: ## Ensure the openapi contract matches the generated code
	ls ccv.yml && ccv check || echo "WARNING! No ccv.yml found"

openapi-generate: ## Store the openapi contract for the microservice
	$(BUILDER) generate-openapi-spec

openapi-compare: ## Compare the openapi contracts for the microservice
	$(BUILDER) download-generate-deps
	$(BUILDER) compare-openapi-specs
-- README.md --
# someservice

## Quick Start 

### Prerequisites

1. [Go-MSX prerequisites](https://cto-github.cisco.com/NFV-BU/go-msx#requirements)

2. [Mini-VMS](https://cto-github.cisco.com/NFV-BU/mini-vms)

    - A pre-installed virtual machine can be allocated from our Ops team 
      [here](https://jenkins.infra.ciscomsx.com/job/eng-generic/job/development/job/dev-ops-vm/)

### Goland

#### Generate IDE run configuration

From the project root directory, execute: 
    
   `skel generate-goland` 
    
   `skel generate-local` 
   
   `skel` can be installed from [Go-MSX prerequisites](https://cto-github.cisco.com/NFV-BU/go-msx#requirements) step above.

#### Local MSX Development  Instance

1. Stage artifacts into the `dist` folder:

    - From the Goland toolbar, execute the `make dist` run configuration

2. Initialize the database:
 
    - From the Goland toolbar, execute the `someservice migrate (local)` run configuration

3. Start the main application entrypoint:
 
    - From the Goland toolbar, execute the `someservice (local)` run configuration
    
#### Remote MSX Development Instance

1. Stage artifacts into the `dist` folder:

    - From the Goland toolbar, execute the `make dist` run configuration
    
2. Configure the location of your remote environment:
   
    - Edit the `./local/someservice.remote.yml` and set your remote
      environment's IP address. if you are connected to VPN, set your local tunnel address and uncomment the `discovery.ipaddress` section :
      
        ```yaml
        remote.service.address: 10.81.85.174
        local.tunnel.address: 10.11.12.13

        spring.cloud:
          consul:
            host: ${remote.service.address}
            discovery.instanceId: local
            #discovery.ipaddress: ${local.tunnel.address}
          vault:
            host: ${remote.service.address}
        ```
    
3. Initialize the database:
 
    - From the Goland toolbar, execute the `someservice migrate (remote)` run configuration

4. Start the main application entrypoint:
 
    - From the Goland toolbar, execute the `someservice (remote)` run configuration

### CLI
1. Stage artifacts into the `dist` directory:
    ```bash
    make dist
    ``` 
   
   All the required resources and artifacts will be staged.
   
2. Switch to the main entrypoint directory:
    ```bash
    cd cmd/app
    ```
   
   From this directory, you can execute the entrypoint and its various commands. 
   
3. Migrate your database:
    ```bash
    go run main.go migrate
    ```

4. Start the main application entrypoint:
    ```bash
    go run main.go
    ```

## Source Code

The following directories are provided for your code and configuration:

* `cmd`
    - Executable entrypoints.  
    - Application entrypoint is `cmd/app/main.go`.
    - Build entrypoint is `cmd/build/build.go`.
    
* `docker`, `k8s`
    - Containerization artifacts.
    
* `local`
    - Local configuration files.  Excluded from repository.

For further details on go project structure, see 
[Standard Go Project Layout](https://github.com/golang-standards/project-layout).

## Build

someservice uses GNU Make for the build system.  The following targets
are available:

* `test` 
    - Execute tests for all modules and generate reports ([`test`](./test))
* `dist` 
    - Build distribution directory and executable ([`dist`](./dist)) 
* `debug` 
    - Build debug executable
* `docker` 
    - Build docker image
* `publish` 
    - Publish docker image and installer manifest
* `clean`
    - Remove test and distribution directories
* `precommit`
    - Prepare code for check-in

To execute a target from the shell, run `make <target>`.

## Goland

This project can be opened in goland, and has several default run configurations:

### Local Mini-MSX

* `someservice (local)`
    - Run the microservice against a local installation of MSX
* `someservice migrate (local)`
    - Migrate the microservice

### Remote Mini-MSX

* `someservice (remote)`
    - Run the microservice against a remote installation of MSX.  The remote
      connection configuration is locate in the [local config](./local) subdirectory
      of the project.
* `someservice migrate (remote)`
    - Migrate the microservice

### Build Targets
* `make clean` 
    - Clean the project
* `make dist`
    - Build the project distribution folder
* `make docker`
    - Build the docker image 
* `make publish`
    - Publish a build of the service pack
-- build/ci/Jenkinsfile --
def REPO_NAME = 'someservice'
def MANIFEST_NAME = 'someservice-manifest'
def GIT_CREDENTIALS = 'msx-jenkins-gen-ssh-key'
def GITHUB_CREDENTIALS = 'msx-jenkins-gen-token-secret-text'
def GITHUB_APP_ID_SONARQUBE = '7'
def GITHUB_APP_NAME_SONARQUBE = 'engit-sonar-int-gen-GPK'
def SONARQUBE_CREDENTIALS = 'SONARQUBE_GPK_ACCESS_TOKEN'
def SONARQUBE_INSTALLATION = 'GPK SonarQube'
def DOCKER_CREDENTIALS = '992579b4-1041-4bd1-827c-6d507970e355'
def SLACK_BOT_CREDENTIALS = 'slack-bot-secret'
def SLACK_CHANNEL = 'go-msx-build'
def ARTIFACTORY_CREDENTIALS = 'f79d92f8-694b-4c29-b477-faeabcef86cb'
def SOURCEGRAPH_ENDPOINT = 'https://sg.infra.ciscomsx.com'
def SOURCEGRAPH_CREDENTIALS = 'sourcegraph-lsif-token'
def BUILD_FLAGS = ""
def TRUNK = 'main'
def TRUNK_MANIFEST_FOLDER = 'Build-Stable'
def PUBLISH = false
def TOOLS = ''
def DEPS = ''
def TRIGGER = ''
def TRIGGER_URL = ''
def PUBLISH_URL = 'https://engci-maven-master.cisco.com/artifactory/symphony-group/com/cisco/vms/manifest'
def FULL_VERSION = ''
def SONARQUBE_ENABLED = false
def GOPROXY = 'https://proxy.golang.org,direct'
def RELEASE_BRANCHES = 'release/'
def IS_TRUNK = false

pipeline {

    agent {
        label env.SLAVE_LABEL
    }

    /* Only keep the 10 most recent builds. */
    options {
        buildDiscarder(logRotator(numToKeepStr: '10', artifactNumToKeepStr: '10'))
    }

    stages {

        stage('Preparation') {
            steps {
                deleteDir()

                script {
                    assert env.BUILD_NUMBER
                    assert env.WORKSPACE

                    if (env.BRANCH_NAME) {
                        currentBuild.description = env.BRANCH_NAME + " (Manual)"
                        TRIGGER = currentBuild.description
                        TRIGGER_URL = "https://cto-github.cisco.com/NFV-BU/${REPO_NAME}/tree/" + env.BRANCH_NAME
                    } else if (env.sha1) {
                        // When called from GitHub PR Builder
                        env.BRANCH_NAME = env.sha1
                        TRIGGER = currentBuild.description
                        TRIGGER_URL = env.ghprbPullLink
                    } else if (env.GIT_BRANCH) {
                        // When called from GitHub Push Notifier
                        env.BRANCH_NAME = env.GIT_BRANCH.replaceAll("origin/", "")
                        currentBuild.description = env.BRANCH_NAME + " (Push)"
                        TRIGGER = currentBuild.description
                        TRIGGER_URL = "https://cto-github.cisco.com/NFV-BU/${REPO_NAME}/tree/" + env.BRANCH_NAME
                    }

                    BUILD_FLAGS = "--build.number=" + env.BUILD_NUMBER

                    if ((env.BRANCH_NAME == TRUNK && || env.BRANCH_NAME.startsWith(RELEASE_BRANCHES)) && !env.MANIFEST_FOLDER) {
                        env.MANIFEST_FOLDER = TRUNK_MANIFEST_FOLDER
                    }

                    if (env.MANIFEST_FOLDER) {
                        BUILD_FLAGS = "${BUILD_FLAGS} --manifest.folder=${env.MANIFEST_FOLDER}"
                        PUBLISH = true
                    }

                    if (env.BUILD_FLAGS) {
                        BUILD_FLAGS = "${BUILD_FLAGS} ${env.BUILD_FLAGS}"
                    }

                    if (env.GOPROXY) {
                        GOPROXY = env.GOPROXY
                        BUILD_FLAGS = "${BUILD_FLAGS} --go.env.all.GOPROXY='$GOPROXY'"
                    }

                    if (env.BRANCH_NAME == TRUNK ||
                        env.BRANCH_NAME == 'master' ||
                        env.BRANCH_NAME == 'main' ||
                        env.BRANCH_NAME.startsWith(RELEASE_BRANCHES)) {
                        IS_TRUNK = true
                    }

                    TOOLS = env.WORKSPACE + "/bin"
                    DEPS = env.WORKSPACE + "/deps"
                    sh "mkdir -p ${TOOLS}"
                    sh "mkdir -p ${DEPS}"
                }
            }
        }

        stage('Checkout') {
            steps {

                checkout([
                    $class                           : 'GitSCM',
                    branches                         : [[name: env.BRANCH_NAME ?: TRUNK]],
                    doGenerateSubmoduleConfigurations: false,
                    extensions                       : [[
                        $class: 'RelativeTargetDirectory',
                        relativeTargetDir: REPO_NAME,
                    ]],
                    userRemoteConfigs                : [[
                        credentialsId: GIT_CREDENTIALS,
                        url          : "git@cto-github.cisco.com:NFV-BU/${REPO_NAME}.git",
                        refspec:       '+refs/pull/*:refs/remotes/origin/pr/* +refs/heads/*:refs/remotes/origin/*'
                    ]]
                ])

            }
        }

        stage('Perform Build') {
            steps {
                sshagent([GIT_CREDENTIALS]) {
                    withEnv([
                        "GOPATH=${env.WORKSPACE}/go",
                        "GOPRIVATE=cto-github.cisco.com/NFV-BU",
                        "GOPROXY=$GOPROXY",
                        "PATH+GOBIN=${env.WORKSPACE}/go/bin",
                        "WORKSPACE=$WORKSPACE/$REPO_NAME",
                        "BUILD_FLAGS=$BUILD_FLAGS"
                    ]) { dir ("$WORKSPACE") {
                        sh 'git config --global url."git@cto-github.cisco.com:".insteadOf "https://cto-github.cisco.com/"'
                        sh 'make all'
                    }}
                }
            }
        }

        stage('Index') {
            steps {
                sshagent([GIT_CREDENTIALS]) {
                    withEnv([
                        "WORKSPACE=$WORKSPACE/$REPO_NAME",
                        "SRC_ENDPOINT=${SOURCEGRAPH_ENDPOINT}"
                    ]) { dir("$WORKSPACE") {
                    withCredentials([string(credentialsId: GITHUB_CREDENTIALS, variable: 'GITHUB_ACCESS_TOKEN')]) {
                    withCredentials([string(credentialsId: SOURCEGRAPH_CREDENTIALS, variable: 'SRC_ACCESS_TOKEN')]) {
                    script {
                        if (IS_TRUNK) {
                            // Download sourcegraph go indexer
                            sh "curl -L https://github.com/sourcegraph/lsif-go/releases/download/v1.2.0/src_linux_amd64 -o ${TOOLS}/lsif-go"
                            sh "chmod +x ${TOOLS}/lsif-go"

                            // Download sourcegraph cli
                            sh "curl -L ${SOURCEGRAPH_ENDPOINT}/.api/src-cli/src_linux_amd64 -o ${TOOLS}/src"
                            sh "chmod +x ${TOOLS}/src"

                            // Index go
                            sh "${TOOLS}/lsif-go"
                            sh "${TOOLS}/src lsif upload -github-token=${GITHUB_ACCESS_TOKEN} -ignore-upload-failure"
                        }
                    }}}}}
                }
            }
        }

        stage('Static Analysis') {
            steps {
                withEnv(["WORKSPACE=$WORKSPACE/$REPO_NAME"]) { dir("$WORKSPACE") {

                    junit 'test/junit-report.xml'

                    publishCoverage adapters: [coberturaAdapter('test/cobertura-coverage.xml')], sourceFileResolver: sourceFiles('NEVER_STORE')

                    withCredentials([string(credentialsId: GITHUB_CREDENTIALS, variable: 'GITHUB_ACCESS_TOKEN')]) {
                        withSonarQubeEnv(credentialsId: SONARQUBE_CREDENTIALS, installationName: SONARQUBE_INSTALLATION) {
                            script {
                                if (SONARQUBE_ENABLED) {
                                    def sonarProperties = [
                                        'userHome': env.WORKSPACE,
                                        'links.ci': env.JOB_URL,
                                        'github.oauth': env.GITHUB_ACCESS_TOKEN,
                                        'sonar.alm.github.app.id': GITHUB_APP_ID_SONARQUBE,
                                        'sonar.alm.github.app.name': GITHUB_APP_NAME_SONARQUBE,
                                    ]

                                    if (!IS_TRUNK) {
                                        if (env.ghprbTargetBranch) {
                                            sonarProperties['pullrequest.github.repository'] = "NFV-BU/${REPO_NAME}"
                                            sonarProperties['pullrequest.provider'] = "github"
                                            sonarProperties['pullrequest.key'] = env.ghprbPullId
                                            sonarProperties['pullrequest.branch'] = env.ghprbSourceBranch
                                            sonarProperties['pullrequest.base'] = env.ghprbTargetBranch
                                        } else {
                                            sonarProperties['branch.name'] = env.BRANCH_NAME
                                            sonarProperties['branch.target'] = TRUNK
                                        }
                                    }

                                    def sonarHome = tool name: 'sonarscaner', type: 'hudson.plugins.sonar.SonarRunnerInstallation'
                                    def sonarCommand = "$sonarHome/bin/sonar-scanner"
                                    sonarProperties.each { key, value -> sonarCommand = sonarCommand + " -Dsonar.$key=$value" }
                                    sonarCommand = sonarCommand + " -Dproject.settings=build/ci/sonar-project.properties"
                                    sh sonarCommand
                                }
                            }

                            // TODO: need to create webhooks manually for each of the sonar project for sonar to send status
//                             script {
//                                 timeout(time: 10, unit: 'MINUTES') {
//                                     def qg = waitForQualityGate()
//                                     if (qg.status != 'OK') {
//                                         error "Pipeline aborted due to microservices quality gate failure: ${qg.status}"
//                                     }
//                                 }
//                             }
                        }
                    }
                }}
            }
        }

        stage('Install Dependencies') {
            steps {
                sshagent([GIT_CREDENTIALS]) {
                    withEnv([
                        "GOPATH=${env.WORKSPACE}/go",
                        "GOPRIVATE=cto-github.cisco.com/NFV-BU",
                        "GOPROXY=$GOPROXY",
                        "PATH+GOBIN=${env.WORKSPACE}/go/bin",
                        "WORKSPACE=$DEPS",
                        "BUILD_FLAGS=$BUILD_FLAGS"
                    ]) {

                        dir ("$WORKSPACE") {
                            sh 'git config --global url."git@cto-github.cisco.com:".insteadOf "https://cto-github.cisco.com/"'
                            sh 'go install cto-github.cisco.com/NFV-BU/contract-verifier/cli/ccv@latest'
                            sh 'git clone https://cto-github.cisco.com/NFV-BU/go-msx.git' 
                        }
                        dir ("$WORKSPACE/go-msx") {
                            sh 'make install-skel'
                        }
                    }
                }
            }
        }

        stage('Verify Contract') {
            steps {
                sshagent([GIT_CREDENTIALS]) {
                    withEnv([
                        "GOPATH=${env.WORKSPACE}/go",
                        "GOPRIVATE=cto-github.cisco.com/NFV-BU",
                        "GOPROXY=$GOPROXY",
                        "PATH+GOBIN=${env.WORKSPACE}/go/bin",
                        "WORKSPACE=$WORKSPACE/$REPO_NAME",
                        "BUILD_FLAGS=$BUILD_FLAGS"
                    ]) { dir ("$WORKSPACE") { withCredentials([string(credentialsId: GITHUB_CREDENTIALS, variable: 'GITHUB_TOKEN')]) {
                        sh 'make clean'
                        sh 'make verify-contract'
                    }}}
                }
            }
        }

        stage('Publish Artifacts') {
            steps {
                sshagent([GIT_CREDENTIALS]) {
                    withEnv([
                        "GOPATH=${env.WORKSPACE}/go",
                        "GOPRIVATE=cto-github.cisco.com/NFV-BU",
                        "GOPROXY=$GOPROXY",
                        "PATH+GOBIN=${env.WORKSPACE}/go/bin",
                        "WORKSPACE=$WORKSPACE/$REPO_NAME",
                        "BUILD_FLAGS=$BUILD_FLAGS"
                    ]) { dir ("$WORKSPACE") {
                        script { withCredentials([usernamePassword(
                            credentialsId: DOCKER_CREDENTIALS,
                            passwordVariable: 'DOCKER_PASSWORD',
                            usernameVariable: 'DOCKER_USERNAME')]) { withCredentials([usernamePassword(
                                credentialsId: ARTIFACTORY_CREDENTIALS,
                                passwordVariable: 'ARTIFACTORY_PASSWORD',
                                usernameVariable: 'ARTIFACTORY_USERNAME')]) {
                                if (PUBLISH) {
                                    sh "make publish"
                                    sh "make tag"
                                }
                        }}}
                    }}
                }
            }
        }

    }

    post {
        always {
            script {
                def RESULT_EMOJIS = [
                    "SUCCESS": ":white_check_mark:",
                    "UNSTABLE": ":jenkins_unstable:",
                    "FAILURE": ":x:",
                    "ABORTED": ":abort:"
                ]

                if (SLACK_CHANNEL != "") {
                    def RESULT_EMOJI = RESULT_EMOJIS[currentBuild.currentResult]
                    def startTimeString = new Date(currentBuild.startTimeInMillis).format("MMM dd HH:mm")
                    def durationString = currentBuild.durationString.replace(" and counting", "")

                    def section = { label, text -> ["type": "section", "fields": [ [ "type": "mrkdwn", "text": "*" + label + ":*\n" + text ] ] ] }
                    def section2 = { label1, text1, label2, text2 -> ["type": "section", "fields": [ [ "type": "mrkdwn", "text": "*" + label1 + ":*\n" + text1 ], [ "type": "mrkdwn", "text": "*" + label2 + ":*\n" + text2 ] ] ] }
                    def header = { text -> ["type": "header", "text": [ "type": "plain_text", "emoji": true, "text": text ] ] }

                    def blocks = [
                        header("${RESULT_EMOJI} ${REPO_NAME} #${env.BUILD_NUMBER}"),
                        section2(
                            "Job", "<${env.RUN_DISPLAY_URL}|${REPO_NAME}/${env.BUILD_NUMBER}>",
                            "Trigger", "<${TRIGGER_URL}|${TRIGGER}>")
                             ]

                    if (PUBLISH && currentBuild.currentResult == 'SUCCESS') {

                        def skelJson = readJSON(file:"${REPO_NAME}/.skel.json")
                        FULL_VERSION = skelJson.appVersion + "-" + env.BUILD_NUMBER
                        PUBLISH_URL = "${PUBLISH_URL}/${env.MANIFEST_FOLDER}/${MANIFEST_NAME}/${FULL_VERSION}/${MANIFEST_NAME}-${FULL_VERSION}-resources.zip"

                        blocks.add(section2(
                            "Built", "${startTimeString} - _${durationString}_",
                            "Published", "<${PUBLISH_URL}|${env.MANIFEST_FOLDER} ${FULL_VERSION}>"))
                    } else {
                        blocks.add(section(
                            "Built", "${startTimeString} - _${durationString}_"))
                    }

                    def testSummaryMicroservice = "Unknown Result"
                    try {
                        def summary = junit(
                            testResults: "${REPO_NAME}/test/junit-report.xml",
                            allowEmptyResults: true)

                        testSummaryMicroservice = "Passed: ${summary.passCount} / ${summary.totalCount}\n" +
                                                    "Failed: ${summary.failCount}\n" +
                                                    "Skipped: ${summary.skipCount}"
                    } catch (e) {}

                    blocks.add(section("Microservice Tests", testSummaryMicroservice))

                    slackSend(
                        channel: SLACK_CHANNEL,
                        blocks: blocks,
                        botUser: true,
                        tokenCredentialId: SLACK_BOT_CREDENTIALS)
                }
            }
        }
    }

}
-- build/ci/checks.yml --
checks:

  - name: Modules
    commands:
      - go: mod download
        fail: delay
        retries: 3
    analyzers:
      - builtin: go-msx-version
    fixes:
      - builtin: go-msx-version-fix

  - name: Vet
    commands:
      - make: vet
        fail: ignore
    analyzers:
      - builtin: generate-vet-report

  - name: Contracts
    module: Microservice
    commands:
      - make: openapi-compare
    analyzers:
      - builtin: generate-openapi-report

  - name: Test
    commands:
      - make: test
        fail: delay
    analyzers:
      - builtin: generate-test-report
        config:
          title: 'Microservice Tests'

  - name: Image
    commands:
      - make: docker
        retries: 3
    analyzers:
      - builtin: generate-images-report

  - name: Assemblies
    commands:
      - make: assemblies

  - name: Deployment
    commands:
      - make: deployment

  - name: Manifest
    commands:
      - make: manifest

slack:
  channel: go-msx-build
-- build/ci/config.xml --
<?xml version='1.1' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@2.39">
    <actions>
        <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@1.6.0"/>
        <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@1.6.0">
            <jobProperties>
                <string>jenkins.model.BuildDiscarderProperty</string>
            </jobProperties>
            <triggers/>
            <parameters/>
            <options/>
        </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>
    </actions>
    <description/>
    <keepDependencies>false</keepDependencies>
    <properties>
        <hudson.plugins.jira.JiraProjectProperty plugin="jira@3.0.15"/>
        <hudson.plugins.buildblocker.BuildBlockerProperty plugin="build-blocker-plugin@1.7.3">
            <useBuildBlocker>false</useBuildBlocker>
            <blockLevel>GLOBAL</blockLevel>
            <scanQueueFor>DISABLED</scanQueueFor>
            <blockingJobs/>
        </hudson.plugins.buildblocker.BuildBlockerProperty>
        <org.datadog.jenkins.plugins.datadog.DatadogJobProperty plugin="datadog@2.9.0">
            <enableFile>false</enableFile>
            <tagFile/>
            <enableProperty>false</enableProperty>
            <tagProperties/>
            <emitSCMEvents>true</emitSCMEvents>
        </org.datadog.jenkins.plugins.datadog.DatadogJobProperty>
        <jenkins.model.BuildDiscarderProperty>
            <strategy class="hudson.tasks.LogRotator">
                <daysToKeep>-1</daysToKeep>
                <numToKeep>10</numToKeep>
                <artifactDaysToKeep>-1</artifactDaysToKeep>
                <artifactNumToKeep>10</artifactNumToKeep>
            </strategy>
        </jenkins.model.BuildDiscarderProperty>
        <com.sonyericsson.jenkins.plugins.bfa.model.ScannerJobProperty plugin="build-failure-analyzer@1.27.1">
            <doNotScan>false</doNotScan>
        </com.sonyericsson.jenkins.plugins.bfa.model.ScannerJobProperty>
        <com.coravy.hudson.plugins.github.GithubProjectProperty plugin="github@1.29.5">
            <projectUrl>https://cto-github.cisco.com/NFV-BU/someservice/</projectUrl>
            <displayName/>
        </com.coravy.hudson.plugins.github.GithubProjectProperty>
        <com.synopsys.arc.jenkins.plugins.ownership.jobs.JobOwnerJobProperty plugin="ownership@0.12.1"/>
        <com.sonyericsson.rebuild.RebuildSettings plugin="rebuild@1.31">
            <autoRebuild>false</autoRebuild>
            <rebuildDisabled>false</rebuildDisabled>
        </com.sonyericsson.rebuild.RebuildSettings>
        <com.synopsys.arc.jenkinsci.plugins.jobrestrictions.jobs.JobRestrictionProperty plugin="job-restrictions@0.8"/>
        <hudson.model.ParametersDefinitionProperty>
            <parameterDefinitions>
                <hudson.model.StringParameterDefinition>
                    <name>BRANCH_NAME</name>
                    <description>Branch Name:
                        &apos;main&apos; - default branch</description>
                    <defaultValue></defaultValue>
                    <trim>false</trim>
                </hudson.model.StringParameterDefinition>
                <hudson.model.StringParameterDefinition>
                    <name>MANIFEST_FOLDER</name>
                    <description>Manifest to Publish:
                        &apos;Dev-Test&apos; - publish to DEV
                        &apos;Build-Stable&apos; - publish to EDGE
                        &apos;EI-Stable&apos; - publish to STABLE</description>
                    <defaultValue/>
                    <trim>false</trim>
                </hudson.model.StringParameterDefinition>
                <hudson.model.StringParameterDefinition>
                    <name>BUILD_FLAGS</name>
                    <description>Extra build flags to pass to go-msx-build</description>
                    <defaultValue/>
                    <trim>false</trim>
                </hudson.model.StringParameterDefinition>
                <hudson.model.StringParameterDefinition>
                    <name>SLAVE_LABEL</name>
                    <description>Build Slave Label
                        &apos;dev-vm&apos; - default build slaves</description>
                    <defaultValue>dev-vm</defaultValue>
                    <trim>false</trim>
                </hudson.model.StringParameterDefinition>
            </parameterDefinitions>
        </hudson.model.ParametersDefinitionProperty>
        <hudson.plugins.throttleconcurrents.ThrottleJobProperty plugin="throttle-concurrents@2.0.2">
            <maxConcurrentPerNode>0</maxConcurrentPerNode>
            <maxConcurrentTotal>0</maxConcurrentTotal>
            <categories class="java.util.concurrent.CopyOnWriteArrayList"/>
            <throttleEnabled>false</throttleEnabled>
            <throttleOption>project</throttleOption>
            <limitOneJobWithMatchingParams>false</limitOneJobWithMatchingParams>
            <paramsToUseForLimit/>
        </hudson.plugins.throttleconcurrents.ThrottleJobProperty>
        <org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
            <triggers>
                <org.jfrog.hudson.trigger.ArtifactoryTrigger plugin="artifactory@3.16.1">
                    <spec>H 2 * * *</spec>
                    <lastModified>1671634284851</lastModified>
                    <details>
                        <artifactoryName>engci-maven-master.cisco.com</artifactoryName>
                        <stagingPlugin/>
                    </details>
                    <branches/>
                    <paths>symphony-release/com/cisco/vms/manifest/stage1-stable/msxbase-amazon-manifest/</paths>
                </org.jfrog.hudson.trigger.ArtifactoryTrigger>
                <com.cloudbees.jenkins.GitHubPushTrigger plugin="github@1.29.5">
                    <spec/>
                </com.cloudbees.jenkins.GitHubPushTrigger>
            </triggers>
        </org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
    </properties>
    <definition class="org.jenkinsci.plugins.workflow.cps.CpsScmFlowDefinition" plugin="workflow-cps@2.80">
        <scm class="hudson.plugins.git.GitSCM" plugin="git@4.2.2">
            <configVersion>2</configVersion>
            <userRemoteConfigs>
                <hudson.plugins.git.UserRemoteConfig>
                    <url>git@cto-github.cisco.com:NFV-BU/someservice.git</url>
                    <credentialsId>msx-jenkins-gen-ssh-key</credentialsId>
                </hudson.plugins.git.UserRemoteConfig>
            </userRemoteConfigs>
            <branches>
                <hudson.plugins.git.BranchSpec>
                    <name>*/main</name>
                </hudson.plugins.git.BranchSpec>
                <hudson.plugins.git.BranchSpec>
                    <name>*/release/*</name>
                </hudson.plugins.git.BranchSpec>
            </branches>
            <doGenerateSubmoduleConfigurations>false</doGenerateSubmoduleConfigurations>
            <submoduleCfg class="list"/>
            <extensions/>
        </scm>
        <scriptPath>build/ci/Jenkinsfile</scriptPath>
        <lightweight>false</lightweight>
    </definition>
    <triggers/>
    <disabled>false</disabled>
</flow-definition>
-- build/ci/sonar-project.properties --
sonar.projectKey=msx-platform-someservice
sonar.projectName=MSX Platform Some Microservice
sonar.projectVersion=5.0.0
sonar.github.endpoint=https://cto-github.cisco.com/api/v3
sonar.github.repository=NFV-BU/someservice

sonar.sources=.
sonar.exclusions=**/*_test.go,**/mock_*.go,**/vendor/**,**/test/**,**/testdata/**,**/mocks/**
sonar.tests=.
sonar.test.inclusions=**/*_test.go
sonar.test.exclusions=**/vendor/**,**/testdata/**,**/mocks/**,**/mock_*.go

sonar.go.coverage.reportPaths=test/gocover.out
sonar.cobertura.reportPath=test/cobertura-coverage.xml
sonar.coverage.exclusions=**/*_test.go,**/mock_*,**/vendor/**,**/test/**,**/testdata/**
-- build/package/Dockerfile --
ARG BASE_IMAGE=dockerhub.cisco.com/vms-platform-dev-docker/msx-base-bullseye:latest

###
### Build container
###

FROM dockerhub.cisco.com/docker.io/golang:1.18-bullseye AS builder
ARG BUILD_FLAGS
ENV BUILDER_FLAGS -mod=vendor
ADD . /app/
WORKDIR /app
RUN make dist
RUN cp build/package/docker-entrypoint.sh dist/root/
RUN chmod 755 dist/root/docker-entrypoint.sh

###
### Distribution Container
###

FROM ${BASE_IMAGE}
EXPOSE 9999
ENV SERVICE_BIN "/usr/bin/someservice"
WORKDIR /var/run/someservice/
CMD ["/usr/bin/someservice"]
COPY --from=builder /app/dist/root/ /
ENTRYPOINT [ "/docker-entrypoint.sh" ]
-- build/package/Dockerfile.debug --
ARG BASE_IMAGE=dockerhub.cisco.com/vms-platform-dev-docker/msx-base-bullseye:latest

### Debug Build Container

FROM dockerhub.cisco.com/docker.io/golang:1.18-bullseye AS debug-builder
ADD . /app/
WORKDIR /app
RUN make dist-debug
WORKDIR /go
RUN go install github.com/go-delve/delve/cmd/dlv@latest

### Debug Container

FROM ${BASE_IMAGE}
EXPOSE 9999
EXPOSE 40000

ENV SERVICE_BIN "/usr/bin/someservice"
COPY --from=debug-builder /app/dist/root/ /
COPY --from=debug-builder /go/bin/dlv /usr/bin

WORKDIR /var/run/someservice/
ENTRYPOINT ["/usr/bin/dlv", "--listen=:40000", "--headless=true", "--api-version=2", "--accept-multiclient", "exec", "/usr/bin/someservice-debug", "--"]

-- build/package/docker-entrypoint.sh --
#!/bin/bash

# Supported ENV variables:
# * POPULATE: Unset, or one of the following to populate options: "database", "all", "resourceString", "serviceMetadata", "serviceCatalog", "customRolesAndCapabilities", "deviceAction", "secretPolicy", "billingScript"
# Note: currently no support for mode

if [ -z "$POPULATE" ]; then
  exec $SERVICE_BIN
fi

MIGRATE_COMMAND="$SERVICE_BIN migrate"

if [ "$POPULATE" = "database" ]; then
    exec $MIGRATE_COMMAND
fi

if [ "$POPULATE" = "all" ]; then
    eval $MIGRATE_COMMAND
    checkResult=$(echo $?)
    if [ $checkResult != 0 ]; then
        echo "Failed to execute migrate as part of populate all!"
        exit 1
    fi
fi

exec $SERVICE_BIN populate $POPULATE
-- cmd/app/bootstrap.yml --
info.app:
  name: someservice
  description: Does Something
  attributes:
    display-name: Some Microservice
    parent: platform
    type: platform

info.build:
  artifact: someservice
  buildDateTime: "2019-01-01T00:00:00.000000Z"
  buildNumber: SNAPSHOT
  release: 5.0.0
  group: com.cisco.msx
  name: Does Something
  version: ${info.build.release}-${info.build.buildNumber}

seccomp:
  enabled: true

server:
  port: 9999
  context-path: /some
  enabled: true

spring.datasource:
  name: someservice
  enabled: true

spring.cloud.consul:
  enabled: true
  config:
    enabled: true
  discovery:
    enabled: true

spring.cloud.vault:
  enabled: true
  generic:
    enabled: true

spring.cloud.stream.kafka.binder:
  enabled: true

spring.redis:
  enable: true

stats:
  enabled: true

swagger:
  enabled: true

trace:
  enabled: true
  reporter:
    name: zipkin
-- cmd/app/main.go --
package main

import (
	_ "cto-github.cisco.com/NFV-BU/go-msx-populator/populate"
	"cto-github.cisco.com/NFV-BU/go-msx/app"
	_ "cto-github.cisco.com/NFV-BU/someservice/internal/migrate"
	_ "cto-github.cisco.com/NFV-BU/someservice/internal/subscription"
)

const (
	appName = "someservice"
)

func main() {
	app.Run(appName)
}
-- cmd/app/someservice.production.yml --
security.keys.jwt:
  key-source: pem
  key-path: /keystore/jwt-pubkey.pem

spring.cloud.consul.discovery:
  instanceId: uuid

http.client.tlsInsecure: false

spring.datasource.data-source-name: postgresql://${spring.datasource.username}:${spring.datasource.password}@${db.cockroach.host}:${db.cockroach.port}/${spring.datasource.name}?sslmode=require&sslrootcert=/etc/ssl/certs/ca-certificates.crt
-- cmd/build/build.go --
package main

import (
	build "cto-github.cisco.com/NFV-BU/go-msx-build/pkg"
)

func main() {
	build.Run()
}
-- cmd/build/build.yml --
executable:
  cmd: app
  configFiles:
    - bootstrap.yml
    - someservice.production.yml

msx:
  release: 5.0.0
  deploymentGroup: someservice
  platform:
    parentArtifacts:
      - com.cisco.vms:vms-service-starter
      - com.cisco.vms:vms-service-starter-core
      - com.cisco.vms:vms-service-starter-kafka
      - com.cisco.nfv:nfv-integration-consul-leader
    version: 5.0.0-STABLE
    includeGroups: "com.cisco.**"

resources:
  includes:
    - "/**/*.sql"
    - "/internal/populate/**/*"

populate:
  root: "/internal/populate"

assemblies:
  root: platform-common

artifactory:
  installer: deployments/kubernetes
  custom: []
  images:
    - someservice
-- deployments/harness/service.yaml --
service:
  name: "someservice"
  identifier: "someservice"
  tags: {}
  serviceDefinition:
    spec:
      manifests:
        - manifest:
            identifier: helm
            type: K8sManifest
            spec:
              store:
                type: Github
                spec:
                  connectorRef: account.githuborg
                  gitFetchType: Branch
                  paths:
                  #if GENERATOR_BEATS
                    - "charts/beatservice-template/templates"
                  #else GENERATOR_BEATS
                    - "charts/goservice-template/templates"
                  #endif GENERATOR_BEATS
                  repoName: helm-charts
                  branch: develop
              valuesPaths:
                  #if GENERATOR_BEATS
                - "charts/beatservice-template/values_someservice.yaml"
                  #else GENERATOR_BEATS
                - "charts/goservice-template/values_someservice.yaml"
                  #endif GENERATOR_BEATS
              skipResourceVersioning: false
        - manifest:
            identifier: Ansible Generated Values File
            type: Values
            spec:
              store:
                type: CustomRemote
                spec:
                  filePath: /tmp/custom/helm_init_vars/values_ansible.yaml
                  extractionScript: |-
                    FILE=/tmp/custom/helm_init_vars/values_ansible.yaml
                    if test -f "$FILE"; then
                        echo "$FILE exists."
                    else
                       touch /tmp/custom/helm_init_vars/values_ansible.yaml
                    fi
                  delegateSelectors:
                    - <+env.name>
      variables:
        - name: slack_notification_channel
          type: String
          description: "the name of the slackchannel where all your service notifications will go prefixed with #cd-pipeline-. for example, setting the value to meraki will result in notifications going to #cd-pipeline-meraki"
          value: "some"
        - name: database_required
          type: String
          description: indicate if your service requires a Database. this is needed for fresh install to let the sp-init ansible playbook know if it needs to create a DB for the service
          value: "true"
        - name: database_name_if_required
          type: String
          description: the name of the database if a DB is needed for your service
          value: "someservice"
        - name: nso_required
          type: String
          description: set to NSO if your service pack requires initializing NSO user name and password (MD only)
          value: "false"
        - name: has_ui
          type: String
          description: set to true if your service comes with UI. this is needed to tell the deployment pipeline whether to deploy UI along with your service
          value: "false"
        - name: servicepack
          type: String
          description: the official name of the servicepack. most of the name it is the name of the service without 'service' postfix, except for the beats
          value: "platformms"
        - name: test_component
          type: String
          description: the name of the component responsible for testing the service. for example, merakigo uses meraki component tests to validate the service
          value: "platformms"
      artifacts:
        primary:
          sources:
            - spec:
                connectorRef: account.cisco_dockerhub_ext
                imagePath: vms-platform-dev-docker/5.0.0/latest/someservice
                tag: <+input>
              identifier: "someservice"
              type: DockerRegistry
          primaryArtifactRef: "someservice"
        sidecars:
          - sidecar:
              spec:
                connectorRef: account.cisco_dockerhub_ext
                imagePath: vms-platform-dev-docker/consul-vms
                tag: <+variable.consulsidecar>
              identifier: consul
              type: DockerRegistry
          - sidecar:
              spec:
                connectorRef: account.cisco_dockerhub_ext
                imagePath: vms-platform-dev-docker/vault-vms
                tag: <+variable.vaultsidecar>
              identifier: vault
              type: DockerRegistry
    type: Kubernetes
-- deployments/harness/values_someservice.yaml --
name: <+service.name>
cmname: <+service.name>
image: <+artifact.image>
containerPort: "9999"
endpoint: "some"
group: "platformms"
vaultInitContainer: "false"
-- deployments/kubernetes/minivms/someservice-deployment.yaml --
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: someservice
  name: someservice
spec:
  replicas: 1
  selector:
    matchLabels:
      app: someservice
  strategy:
    type: Recreate
  template:
    metadata:
      annotations:
        fluentbit.io/parser: logfmt
        tagprefix: logfmt
      labels:
        app: someservice
    spec:
      containers:
        - env:
            - name: SERVER_PORT
              value: "9999"
            - name: SPRING_CLOUD_CONSUL_DISCOVERY_IPADDRESS
              valueFrom:
                fieldRef:
                  fieldPath: status.hostIP
            - name: SPRING_CLOUD_CONSUL_HOST
              valueFrom:
                fieldRef:
                  fieldPath: status.hostIP
            - name: SPRING_CLOUD_VAULT_HOST
              valueFrom:
                fieldRef:
                  fieldPath: status.hostIP
          image: dockerhub.cisco.com/vms-platform-dev-docker/someservice:5.0.0
          name: someservice
          ports:
            - containerPort: 9999
          volumeMounts:
            - mountPath: /etc/ssl/certs
              name: someservice-user-volume0
              subPath: config/certs
      enableServiceLinks: false
      restartPolicy: Always
      volumes:
        - hostPath:
            path: /home/ubuntu/vms/volumes
          name: someservice-user-volume0
-- deployments/kubernetes/msxlite/someservice-deployment.yaml --
---
  apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app: someservice
      group: platformms
    namespace: vms
    name: someservice-5.0.0
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: someservice
        group: platformms
    template:
      metadata:
        name: someservice-5.0.0
        labels:
          app: someservice
          group: platformms
          consul-gossip: allow
        annotations:
          tagprefix: logfmt
      spec:
        serviceAccountName: someservice
        affinity:
          podAntiAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
              - weight: 100
                podAffinityTerm:
                  labelSelector:
                    matchExpressions:
                      - key: app
                        operator: In
                        values:
                          - someservice
                  topologyKey: kubernetes.io/hostname
        imagePullSecrets:
          - name: ciscovms-registry
        containers:
          - name: consul
            image: registry.service.consul:5000/consul-vms:5.0.0-1.13.2-353
            command:
              - consul
              - agent
              - -bind=0.0.0.0
              - -client=0.0.0.0
              - -datacenter=vms1
              - -retry-join=consul.service.consul
              - -data-dir=/consul/data
              - -config-dir=/consul/config
            volumeMounts:
              - mountPath: /consul/config
                name: phi
          - name: someservice
            image: registry.service.consul:5000/someservice
            command:
              - "/usr/bin/someservice"
              - --profile
              - production
            resources:
              requests:
                memory: "64Mi"
                cpu: "500m"
              limits:
                memory: "256Mi"
                cpu: "2000m"
            env:
              # BEGIN ANSIBLE MANAGED BLOCK
              - name: SPRING_PROFILES_ACTIVE
                value: "indepauthservice"
              - name: SPRING_CLOUD_STREAM_DEFAULT_CONSUMER_AUTOSTARTUP
                value: "true"
              - name: SPRING_CLOUD_CONSUL_DISCOVERY_DEFAULTQUERYTAG
                value: "5.0.0"
              - name: SPRING_CLOUD_CONSUL_DISCOVERY_TAGS
                value: "5.0.0"
              # END ANSIBLE MANAGED BLOCK
              - name: PROFILE
                value: production
              - name: SPRING_CLOUD_CONSUL_HOST
                value: "localhost"
              - name: SPRING_CLOUD_CONSUL_SCHEME
                value: "https"
              - name: SPRING_CLOUD_CONSUL_PORT
                value: "8500"
              - name: SPRING_CLOUD_CONSUL_CONFIG_ACLTOKEN
                valueFrom:
                  secretKeyRef:
                    name: msxconsul
                    key: token
              - name: SPRING_CLOUD_VAULT_HOST
                value: "vault.service.consul"
              - name: SPRING_CLOUD_VAULT_PORT
                value: "8200"
              - name: SPRING_CLOUD_VAULT_SCHEME
                value: "https"
              - name: SPRING_CLOUD_VAULT_TOKEN-SOURCE_SOURCE
                value: "kubernetes"
              - name: SPRING_CLOUD_VAULT_TOKEN-SOURCE_KUBERNETES_ROLE
                value: "someservice"
              - name: SPRING_REDIS_SENTINEL_ENABLE
                value: "true"
            ports:
              - containerPort: 7858
            volumeMounts:
              - mountPath: /etc/ssl/certs/ca-certificates.crt
                name: rootcert
              - mountPath: /certs/someservice-key.pem
                name: cockroach-client-sslkey
              - mountPath: /certs/someservice.pem
                name: cockroach-client-sslcert
              - mountPath: /keystore
                name: keystore
        volumes:
          - hostPath:
              path: /etc/ssl/certs/ca-bundle.crt
            name: rootcert
          - hostPath:
              path: /etc/ssl/vms-certs/someservice-key.pem
            name: cockroach-client-sslkey
          - hostPath:
              path: /etc/ssl/vms-certs/someservice.pem
            name: cockroach-client-sslcert
          - hostPath:
              path: /data/vms/keystore/
            name: keystore
          - configMap:
              name: phi
            name: phi
-- deployments/kubernetes/someservice-meta.yml.tpl --
---
apiVersion: v1
kind: Pod
metadata:
  namespace: "{{ kubernetes_namespace }}"
  name: someservicemeta
  labels:
    app: someservicemeta
    group: platformms
  annotations:
    tagprefix: logfmt
spec:
  serviceAccountName: someservice
  restartPolicy: Never
  containers:
    - name: someservice
      image: {{ someservice_image }}:{{ someservice_version }}
      command:
        - /usr/bin/someservice
        - --profile
        - production
        - populate
      env:
        - name: MODE
          value: {{ schema_mode }}
        - name: POPULATE
          value: all
        - name: SPRING_CLOUD_CONSUL_HOST
          value: "consul.service.consul"
        - name: SPRING_CLOUD_CONSUL_PORT
          value: "8500"
        - name: SPRING_CLOUD_CONSUL_SCHEME
          value: "{{ vault_scheme }}"
        - name: SPRING_CLOUD_CONSUL_CONFIG_ACLTOKEN
          valueFrom:
            secretKeyRef:
              name: msxconsul
              key: token
        - name: SPRING_CLOUD_VAULT_HOST
          value: "vault.service.consul"
        - name: SPRING_CLOUD_VAULT_PORT
          value: "8200"
        - name: SPRING_CLOUD_VAULT_SCHEME
          value: "{{ vault_scheme }}"
        - name: SPRING_CLOUD_VAULT_TOKEN-SOURCE_SOURCE
          value: "kubernetes"
        - name: SPRING_CLOUD_VAULT_TOKEN-SOURCE_KUBERNETES_ROLE
          value: "someservice"
      volumeMounts:
        - mountPath: /etc/ssl/certs/ca-certificates.crt
          name: rootcert
        - mountPath: /certs/someservice-key.pem
          name: cockroach-client-sslkey
        - mountPath: /certs/someservice.pem
          name: cockroach-client-sslcert
        - mountPath: /keystore
          name: keystore
  volumes:
    - hostPath:
        path: /etc/ssl/certs/ca-bundle.crt
      name: rootcert
    - hostPath:
        path: /etc/ssl/vms-certs/someservice-key.pem
      name: cockroach-client-sslkey
    - hostPath:
        path: /etc/ssl/vms-certs/someservice.pem
      name: cockroach-client-sslcert
    - name: keystore
      hostPath:
        path: /data/vms/keystore/
-- deployments/kubernetes/someservice-pdb.yml.tpl --
---
apiVersion: policy/v1beta1
kind: PodDisruptionBudget
metadata:
  labels:
    app: someservice
    group: platformms
  name: someservice-pdb
  namespace: {{ kubernetes_namespace }}
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app: someservice
-- deployments/kubernetes/someservice-pod.yml.tpl --
---
apiVersion: v1
kind: Pod
metadata:
  namespace: "{{ kubernetes_namespace }}"
  name: someservicepod
  labels:
    app: someservicepod
    group: platformms
  annotations:
    tagprefix: logfmt
spec:
  serviceAccountName: someservice
  restartPolicy: Never
  containers:
    - name: someservice
      image: {{ someservice_image }}:{{ someservice_version }}
      command:
        - /usr/bin/someservice
        - --profile
        - production
        - migrate
      resources:
        requests:
          cpu: "500m"
      env:
        - name: MODE
          value: {{ schema_mode }}
        - name: POPULATE
          value: database
        - name: SPRING_CLOUD_CONSUL_HOST
          value: "consul.service.consul"
        - name: SPRING_CLOUD_CONSUL_PORT
          value: "8500"
        - name: SPRING_CLOUD_CONSUL_SCHEME
          value: "{{ vault_scheme }}"
        - name: SPRING_CLOUD_CONSUL_CONFIG_ACLTOKEN
          valueFrom:
            secretKeyRef:
              name: msxconsul
              key: token
        - name: SPRING_CLOUD_VAULT_HOST
          value: "vault.service.consul"
        - name: SPRING_CLOUD_VAULT_PORT
          value: "8200"
        - name: SPRING_CLOUD_VAULT_SCHEME
          value: "{{ vault_scheme }}"
        - name: SPRING_CLOUD_VAULT_TOKEN-SOURCE_SOURCE
          value: "kubernetes"
        - name: SPRING_CLOUD_VAULT_TOKEN-SOURCE_KUBERNETES_ROLE
          value: "someservice"
      volumeMounts:
        - mountPath: /keystore
          name: keystore
        - mountPath: /etc/ssl/certs/ca-certificates.crt
          name: rootcert
        - mountPath: /certs/someservice-key.pem
          name: cockroach-client-sslkey
        - mountPath: /certs/someservice.pem
          name: cockroach-client-sslcert
  volumes:
    - name: keystore
      hostPath:
        path: /data/vms/keystore/
    - hostPath:
        path: /etc/ssl/certs/ca-bundle.crt
      name: rootcert
    - hostPath:
        path: /etc/ssl/vms-certs/someservice-key.pem
      name: cockroach-client-sslkey
    - hostPath:
        path: /etc/ssl/vms-certs/someservice.pem
      name: cockroach-client-sslcert
-- deployments/kubernetes/someservice-rc.yml.tpl --
---
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: vms
  name: someservice
  labels:
    app: someservice
spec:
  replicas: {{ deployment_mode_env[deployment_mode|lower]['replica_count']['someservice'] }}
  selector:
    matchLabels:
      app: someservice
      group: platformms
      consul-gossip: allow
  template:
    metadata:
      name: someservice
      labels:
        app: someservice
        group: platformms
        consul-gossip: allow
      annotations:
        tagprefix: logfmt
    spec:
      serviceAccountName: someservice
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - someservice
              topologyKey: kubernetes.io/hostname
{% if cloud == 'aws' %}
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - someservice
              topologyKey: topology.kubernetes.io/zone
{% endif %}
      containers:
        - name: consul
          image: {{ consul_image }}:{{ consul_version }}
          command:
            - consul
            - agent
            - -bind=0.0.0.0
            - -client=0.0.0.0
            - -datacenter={{ consul_dc }}
            - -retry-join=consul.service.consul
            - -data-dir=/consul/data
            - -config-dir=/consul/config
          volumeMounts:
            - mountPath: /consul/config
              name: phi
        - name: someservice
          image: {{ someservice_image }}:{{ someservice_version }}
          command:
            - "/usr/bin/someservice"
            - --profile
            - production
          livenessProbe:
            httpGet:
              path: /some/admin/alive
              port: 9999
            initialDelaySeconds: 300
            periodSeconds: 30
          readinessProbe:
            httpGet:
              path: /some/admin/health
              port: 9999
            initialDelaySeconds: 0
            periodSeconds: 30
          startupProbe:
            httpGet:
              path: /some/admin/health
              port: 9999
            failureThreshold: 45
            periodSeconds: 5
          resources:
            requests:
              memory: "64Mi"
              cpu: "500m"
            limits:
              memory: "256Mi"
              cpu: "2000m"
          env:
            - name: PROFILE
              value: production
            - name: SPRING_CLOUD_CONSUL_HOST
              value: "localhost"
            - name: SPRING_CLOUD_CONSUL_SCHEME
              value: "{{ vault_scheme }}"
            - name: SPRING_CLOUD_CONSUL_PORT
              value: "8500"
            - name: SPRING_CLOUD_CONSUL_CONFIG_ACLTOKEN
              valueFrom:
                secretKeyRef:
                  name: msxconsul
                  key: token
            - name: SPRING_CLOUD_VAULT_HOST
              value: "vault.service.consul"
            - name: SPRING_CLOUD_VAULT_PORT
              value: "8200"
            - name: SPRING_CLOUD_VAULT_SCHEME
              value: "{{ vault_scheme }}"
            - name: SPRING_CLOUD_VAULT_TOKEN-SOURCE_SOURCE
              value: "kubernetes"
            - name: SPRING_CLOUD_VAULT_TOKEN-SOURCE_KUBERNETES_ROLE
              value: "someservice"
            - name: SPRING_REDIS_SENTINEL_ENABLE
              value: "true"
          ports:
            - containerPort: 9999
          volumeMounts:
            - mountPath: /etc/ssl/certs/ca-certificates.crt
              name: rootcert
            - mountPath: /keystore
              name: keystore
      volumes:
        - hostPath:
            path: /etc/ssl/certs/ca-bundle.crt
          name: rootcert
        - hostPath:
            path: /data/vms/keystore/
          name: keystore
        - configMap:
            name: phi
          name: phi
-- deployments/kubernetes/someservice_deployment_variables.yml --
someservice:
  name: "someservice"
  discovery_tags: "{{ deployer_version }}"
  service_version: "{{ someservice_build_version }}"
  dependencies:
  microservices:
    "someservice": "{{ someservice_build_version }}"
  db_migration_required: yes
  nginx_routes_required: yes
  router_routes_required:
    "someservice": "/some"
  mode: "NewInstall"
  dp_templates:
    version: "{{ someservice_build_version }}"
    templates:
    # - devicemanager
    # - monitor
    # - reporting
  platform_templates:
    # - manage
    # - notification
    # - template
  cockroachdb:
    db_name: "someservice"
#endif
-- go.mod --
module cto-github.cisco.com/NFV-BU/someservice

go 1.18

require (
	cto-github.cisco.com/NFV-BU/go-msx v0.7.37
	cto-github.cisco.com/NFV-BU/go-msx-build v0.5.0
	cto-github.cisco.com/NFV-BU/go-msx-populator v0.14.0
)

require (
	cto-github.cisco.com/NFV-BU/go-msx-platform-client v0.22.0 // indirect
	github.com/DataDog/datadog-go v4.4.0+incompatible // indirect
	github.com/DataDog/sketches-go v1.0.0 // indirect
	github.com/Microsoft/go-winio v0.5.0 // indirect
	github.com/PuerkitoBio/purell v1.1.1 // indirect
	github.com/PuerkitoBio/urlesc v0.0.0-20170810143723-de5bf2ad4578 // indirect
	github.com/Rican7/retry v0.3.1 // indirect
	github.com/Shopify/sarama v1.32.0 // indirect
	github.com/ThreeDotsLabs/watermill v1.1.1 // indirect
	github.com/ThreeDotsLabs/watermill-kafka/v2 v2.2.2 // indirect
	github.com/ThreeDotsLabs/watermill-sql v1.3.4 // indirect
	github.com/armon/go-metrics v0.4.1 // indirect
	github.com/asaskevich/govalidator v0.0.0-20200428143746-21a406dcc535 // indirect
	github.com/beorn7/perks v1.0.1 // indirect
	github.com/bmatcuk/doublestar v1.1.5 // indirect
	github.com/cenkalti/backoff/v3 v3.0.0 // indirect
	github.com/cespare/xxhash/v2 v2.1.2 // indirect
	github.com/davecgh/go-spew v1.1.1 // indirect
	github.com/dgryski/go-rendezvous v0.0.0-20200823014737-9f7001d12a5f // indirect
	github.com/doug-martin/goqu/v9 v9.18.0 // indirect
	github.com/eapache/go-resiliency v1.2.0 // indirect
	github.com/eapache/go-xerial-snappy v0.0.0-20180814174437-776d5712da21 // indirect
	github.com/eapache/queue v1.1.0 // indirect
	github.com/elastic/go-seccomp-bpf v1.2.0 // indirect
	github.com/emicklei/go-restful v2.15.0+incompatible // indirect
	github.com/emicklei/go-restful-openapi v1.4.1 // indirect
	github.com/fatih/color v1.13.0 // indirect
	github.com/fatih/structtag v1.2.0 // indirect
	github.com/ghodss/yaml v1.0.0 // indirect
	github.com/go-ini/ini v1.48.0 // indirect
	github.com/go-logr/logr v1.2.3 // indirect
	github.com/go-logr/stdr v1.2.2 // indirect
	github.com/go-openapi/jsonpointer v0.19.5 // indirect
	github.com/go-openapi/jsonreference v0.19.6 // indirect
	github.com/go-openapi/spec v0.20.4 // indirect
	github.com/go-openapi/swag v0.19.15 // indirect
	github.com/go-ozzo/ozzo-validation v3.6.0+incompatible // indirect
	github.com/go-redis/redis/v8 v8.11.4 // indirect
	github.com/go-stack/stack v1.8.0 // indirect
	github.com/gocql/gocql v0.0.0-20210413161705-87a5d7a5ff74 // indirect
	github.com/golang-jwt/jwt/v4 v4.4.2 // indirect
	github.com/golang/protobuf v1.5.2 // indirect
	github.com/golang/snappy v0.0.4 // indirect
	github.com/google/go-github/v38 v38.1.0 // indirect
	github.com/google/go-querystring v1.0.0 // indirect
	github.com/google/uuid v1.3.0 // indirect
	github.com/hailocab/go-hostpool v0.0.0-20160125115350-e80d13ce29ed // indirect
	github.com/hashicorp/consul/api v1.18.0 // indirect
	github.com/hashicorp/errwrap v1.1.0 // indirect
	github.com/hashicorp/go-cleanhttp v0.5.2 // indirect
	github.com/hashicorp/go-hclog v1.3.1 // indirect
	github.com/hashicorp/go-immutable-radix v1.3.1 // indirect
	github.com/hashicorp/go-multierror v1.1.1 // indirect
	github.com/hashicorp/go-retryablehttp v0.6.7 // indirect
	github.com/hashicorp/go-rootcerts v1.0.2 // indirect
	github.com/hashicorp/go-sockaddr v1.0.2 // indirect
	github.com/hashicorp/go-uuid v1.0.2 // indirect
	github.com/hashicorp/golang-lru v0.5.4 // indirect
	github.com/hashicorp/hcl v1.0.0 // indirect
	github.com/hashicorp/serf v0.10.1 // indirect
	github.com/hashicorp/vault/api v1.0.5-0.20200717191844-f687267c8086 // indirect
	github.com/hashicorp/vault/sdk v0.1.14-0.20200519221838-e0cfd64bc267 // indirect
	github.com/iancoleman/strcase v0.2.0 // indirect
	github.com/inconshreveable/mousetrap v1.0.0 // indirect
	github.com/jackc/puddle v1.2.1 // indirect
	github.com/jackpal/gateway v1.0.7 // indirect
	github.com/jcmturner/aescts/v2 v2.0.0 // indirect
	github.com/jcmturner/dnsutils/v2 v2.0.0 // indirect
	github.com/jcmturner/gofork v1.0.0 // indirect
	github.com/jcmturner/gokrb5/v8 v8.4.2 // indirect
	github.com/jcmturner/rpc/v2 v2.0.3 // indirect
	github.com/jmoiron/sqlx v1.3.5 // indirect
	github.com/josharian/intern v1.0.0 // indirect
	github.com/json-iterator/go v1.1.12 // indirect
	github.com/kennygrant/sanitize v1.2.4 // indirect
	github.com/klauspost/compress v1.15.1 // indirect
	github.com/lib/pq v1.10.6 // indirect
	github.com/lithammer/dedent v1.1.0 // indirect
	github.com/lithammer/shortuuid/v3 v3.0.7 // indirect
	github.com/magiconair/properties v1.8.7 // indirect
	github.com/mailru/easyjson v0.7.6 // indirect
	github.com/mattn/go-colorable v0.1.13 // indirect
	github.com/mattn/go-isatty v0.0.16 // indirect
	github.com/mattn/go-jsonpointer v0.0.1 // indirect
	github.com/matttproud/golang_protobuf_extensions v1.0.1 // indirect
	github.com/minghsu0107/watermill-redistream v1.0.0 // indirect
	github.com/mitchellh/go-homedir v1.1.0 // indirect
	github.com/mitchellh/mapstructure v1.5.0 // indirect
	github.com/modern-go/concurrent v0.0.0-20180306012644-bacd9c7ef1dd // indirect
	github.com/modern-go/reflect2 v1.0.2 // indirect
	github.com/oklog/ulid v1.3.1 // indirect
	github.com/opentracing/opentracing-go v1.1.0 // indirect
	github.com/otiai10/copy v1.0.2 // indirect
	github.com/pavel-v-chernykh/keystore-go v2.1.0+incompatible // indirect
	github.com/philhofer/fwd v1.1.1 // indirect
	github.com/pierrec/lz4 v2.6.1+incompatible // indirect
	github.com/pkg/errors v0.9.1 // indirect
	github.com/pmezard/go-difflib v1.0.0 // indirect
	github.com/prometheus/client_golang v1.13.0 // indirect
	github.com/prometheus/client_model v0.2.0 // indirect
	github.com/prometheus/common v0.37.0 // indirect
	github.com/prometheus/procfs v0.8.0 // indirect
	github.com/radovskyb/watcher v1.0.7 // indirect
	github.com/rcrowley/go-metrics v0.0.0-20201227073835-cf1acfcdf475 // indirect
	github.com/renstrom/shortuuid v3.0.0+incompatible // indirect
	github.com/robfig/cron/v3 v3.0.1 // indirect
	github.com/ryanuber/go-glob v1.0.0 // indirect
	github.com/santhosh-tekuri/jsonschema/v5 v5.0.1 // indirect
	github.com/shurcooL/httpfs v0.0.0-20190707220628-8d4bc4ba7749 // indirect
	github.com/shurcooL/vfsgen v0.0.0-20181202132449-6a9ea43bcacd // indirect
	github.com/sirupsen/logrus v1.9.0 // indirect
	github.com/spf13/cast v1.5.0 // indirect
	github.com/spf13/cobra v1.5.0 // indirect
	github.com/spf13/pflag v1.0.5 // indirect
	github.com/stretchr/objx v0.5.0 // indirect
	github.com/stretchr/testify v1.8.1 // indirect
	github.com/swaggest/jsonschema-go v0.3.43 // indirect
	github.com/swaggest/openapi-go v0.2.26 // indirect
	github.com/swaggest/refl v1.1.0 // indirect
	github.com/thejerf/abtime v1.0.3 // indirect
	github.com/tinylib/msgp v1.1.2 // indirect
	github.com/uber/jaeger-client-go v2.19.0+incompatible // indirect
	github.com/uber/jaeger-lib v2.0.0+incompatible // indirect
	github.com/vmihailenco/msgpack v4.0.4+incompatible // indirect
	go.opentelemetry.io/contrib/instrumentation/github.com/Shopify/sarama/otelsarama v0.31.0 // indirect
	go.opentelemetry.io/otel v1.6.1 // indirect
	go.opentelemetry.io/otel/trace v1.6.1 // indirect
	go.uber.org/atomic v1.9.0 // indirect
	golang.org/x/crypto v0.1.0 // indirect
	golang.org/x/mod v0.7.0 // indirect
	golang.org/x/net v0.4.0 // indirect
	golang.org/x/oauth2 v0.0.0-20220808172628-8227340efae7 // indirect
	golang.org/x/sys v0.3.0 // indirect
	golang.org/x/text v0.5.0 // indirect
	golang.org/x/time v0.1.0 // indirect
	golang.org/x/xerrors v0.0.0-20220907171357-04be3eba64a2 // indirect
	google.golang.org/appengine v1.6.7 // indirect
	google.golang.org/protobuf v1.28.1 // indirect
	gopkg.in/DataDog/dd-trace-go.v1 v1.33.0 // indirect
	gopkg.in/inf.v0 v0.9.1 // indirect
	gopkg.in/pipe.v2 v2.0.0-20140414041502-3c2ca4d52544 // indirect
	gopkg.in/square/go-jose.v2 v2.5.1 // indirect
	gopkg.in/yaml.v2 v2.4.0 // indirect
	gopkg.in/yaml.v3 v3.0.1 // indirect
	moul.io/banner v1.0.1 // indirect
)
-- internal/empty_test.go --
package internal

import "testing"

func Test_Skipped(t *testing.T) {
	t.SkipNow()
}
-- internal/migrate/V5_0_0/migrate.go --
package V5_0_0

import (
	"context"
	"cto-github.cisco.com/NFV-BU/go-msx/app"
	"cto-github.cisco.com/NFV-BU/go-msx/resource"
	"cto-github.cisco.com/NFV-BU/go-msx/sqldb/migrate"
)

func init() {
	app.OnEvent(app.EventCommand, app.CommandMigrate, func(ctx context.Context) error {
		app.OnEvent(app.EventStart, app.PhaseDuring, func(ctx context.Context) error {
			return migrate.
				ManifestFromContext(ctx).
				AddSqlResourceMigrations(
					resource.References("*.sql")...,
				)
		})
		return nil
	})
}
-- internal/migrate/migrate.go --
package migrate

import (
	_ "cto-github.cisco.com/NFV-BU/someservice/internal/migrate/V5_0_0"
)
-- internal/subscription/context.go --
package subscription

import (
	"context"
	"cto-github.cisco.com/NFV-BU/go-msx/log"
	"cto-github.cisco.com/NFV-BU/go-msx/webservice"
)

var logger = log.NewLogger("someservice.subscription")

type contextKey int

const (
	contextKeyController contextKey = iota
	contextKeyService
	contextKeyRepository
)

func controllerFromContext(ctx context.Context) webservice.RestController {
	value, _ := ctx.Value(contextKeyController).(webservice.RestController)
	return value
}

func contextWithController(ctx context.Context, controller webservice.RestController) context.Context {
	return context.WithValue(ctx, contextKeyController, controller)
}

func serviceFromContext(ctx context.Context) subscriptionServiceApi {
	value, _ := ctx.Value(contextKeyService).(subscriptionServiceApi)
	return value
}

func contextWithService(ctx context.Context, service subscriptionServiceApi) context.Context {
	return context.WithValue(ctx, contextKeyService, service)
}
-- internal/subscription/controller.go --
package subscription

import (
	"context"
	"cto-github.cisco.com/NFV-BU/go-msx/app"
	"cto-github.cisco.com/NFV-BU/go-msx/rbac"
	"cto-github.cisco.com/NFV-BU/go-msx/webservice"
	"cto-github.cisco.com/NFV-BU/someservice/pkg/api"
	"errors"
	"github.com/emicklei/go-restful"
)

const (
	pathRoot                = "api/v1/subscriptions"
	paramNameSubscriptionId = "subscriptionId"
)

var (
	managePermission         = webservice.Permissions(rbac.PermissionManageServices)
	pathParamSubscriptionId  = restful.PathParameter(paramNameSubscriptionId, "Subscription Id")
	pathSuffixSubscriptionId = "/{subscriptionId}"
)

type subscriptionController struct {
	subscriptionService   subscriptionServiceApi
	subscriptionConverter subscriptionConverter
}

func (c *subscriptionController) Routes(svc *restful.WebService) {
	svc.ApiVersion("v2")
	tag := webservice.TagDefinition("Subscriptions", "Subscription Controller")
	webservice.Routes(svc,
		tag,
		c.createSubscription,
		c.deleteSubscription,
	)
}

func (c *subscriptionController) createSubscription(svc *restful.WebService) *restful.RouteBuilder {
	type params struct {
		Request api.SubscriptionCreateRequest `req:"body"`
	}

	return svc.POST("").Operation("createSubscription").
		Doc("API to create subscription").
		Notes("API to create subscription").
		Do(webservice.StandardCreate).
		Do(webservice.ResponsePayload(api.SubscriptionCreateResponse{})).
		Do(managePermission).
		Reads(api.SubscriptionCreateRequest{}).
		Do(webservice.PopulateParams(params{})).
		To(webservice.Controller(
			func(req *restful.Request) (body interface{}, err error) {

				converted, ok := webservice.Params(req).(*params)

				if !ok {
					return api.SubscriptionCreateResponse{}, errors.New("failed to parse body")
				}

				subscription, err := c.subscriptionService.CreateSubscription(req.Request.Context(), converted.Request)
				return c.subscriptionConverter.ToCreateResponse(subscription), err
			}))
}

func (c *subscriptionController) deleteSubscription(svc *restful.WebService) *restful.RouteBuilder {
	type params struct {
		SubscriptionId string `req:"path"`
	}

	return svc.DELETE(pathSuffixSubscriptionId).Operation("deleteSubscription").
		Doc("API to start deletion of subscription").
		Notes("API to start deletion of subscription").
		Do(webservice.StandardDelete).
		Do(managePermission).
		Param(pathParamSubscriptionId).
		Do(webservice.PopulateParams(params{})).
		To(webservice.Controller(
			func(req *restful.Request) (body interface{}, err error) {

				converted, ok := webservice.Params(req).(*params)
				if !ok {
					return nil, errors.New("failed to parse param")
				}

				delErr := c.subscriptionService.DeleteSubscription(req.Request.Context(), converted.SubscriptionId)
				return nil, delErr
			}))
}

func newSubscriptionController(ctx context.Context) webservice.RestController {
	service := controllerFromContext(ctx)
	if service == nil {
		service = &subscriptionController{
			subscriptionService:   newSubscriptionService(ctx),
			subscriptionConverter: subscriptionConverter{},
		}
	}
	return service
}

func init() {
	app.OnEvent(app.EventCommand, app.CommandRoot, func(ctx context.Context) error {
		app.OnEvent(app.EventStart, app.PhaseBefore, func(ctx context.Context) error {
			if svc, err := webservice.WebServerFromContext(ctx).NewService(pathRoot); err != nil {
				return err
			} else {
				newSubscriptionController(ctx).Routes(svc)
			}
			return nil
		})
		return nil
	})
}
-- internal/subscription/converter.go --
package subscription

import "cto-github.cisco.com/NFV-BU/someservice/pkg/api"

type subscriptionConverter struct{}

func (c *subscriptionConverter) ToCreateResponse(subscription subscription) api.SubscriptionCreateResponse {
	return api.SubscriptionCreateResponse{
		SubscriptonId:     subscription.SubscriptionId,
		ServiceInstanceId: subscription.ServiceInstanceId,
	}
}
-- internal/subscription/model.go --
package subscription

type subscription struct {
	SubscriptionId    string
	ServiceInstanceId string
}
-- internal/subscription/service.go --
package subscription

import (
	"context"
	consume "cto-github.cisco.com/NFV-BU/catalogservice/pkg/api"
	"cto-github.cisco.com/NFV-BU/go-msx/integration/manage"
	"cto-github.cisco.com/NFV-BU/someservice/pkg/api"
	"github.com/pkg/errors"
)

const (
	ServiceLifecycleStateOrdering     = "ORDERING"
	ServiceLifecycleStateProvisioning = "PROVISIONING"
	ServiceLifecycleStateProvisioned  = "PROVISIONED"
	ServiceLifecycleStateDeleting     = "DELETING"
	ServiceLifecycleStateOrderFailed  = "ORDER_FAILED"
)

var (
	errPayloadConversion = errors.New("error converting payload")
)

type subscriptionServiceApi interface {
	CreateSubscription(ctx context.Context, req api.SubscriptionCreateRequest) (subscription, error)
	DeleteSubscription(ctx context.Context, serviceInstanceId string) error
}

type subscriptionService struct {
	subscriptionConverter subscriptionConverter
}

func (s *subscriptionService) CreateSubscription(ctx context.Context, req api.SubscriptionCreateRequest) (subscription, error) {
	consumeApi := consume.NewIntegration(ctx)

	offerResponse, err := consumeApi.GetOffer(req.OfferId)
	if err != nil {
		return subscription{}, err
	}

	offerPayload, ok := offerResponse.Payload.(*consume.ServiceOffering)
	if !ok {
		return subscription{}, errPayloadConversion
	}

	manageApi, err := manage.NewIntegration(ctx)
	if err != nil {
		return subscription{}, err
	}

	response, err := manageApi.CreateSubscription(
		req.TenantId,
		"",
		nil,
		map[string]string{},
		map[string]string{
			"id": req.OfferId,
		},
		map[string]string{},
		map[string]string{})
	if err != nil {
		return subscription{}, err
	}

	subscriptionPayload, ok := response.Payload.(*manage.CreateSubscriptionResponse)

	if !ok {
		return subscription{}, errPayloadConversion
	}

	response, err = manageApi.CreateServiceInstance(
		subscriptionPayload.SubscriptionID,
		"",
		map[string]string{}, map[string]string{
			"type":      "",
			"offerName": offerPayload.Name,
			"id":        req.ServiceId,
		},
		map[string]string{
			"lifeCycleStatus": "Ordering",
			"txStatus":        "ORDERING",
		})
	if err != nil {
		return subscription{}, errors.Wrap(err, "Failed to submit create subscription request")
	}

	serviceInstanceResponse, ok := response.Payload.(*manage.ServiceInstanceResponse)
	if !ok {
		return subscription{}, errPayloadConversion
	}

	// Set service to provisioned
	err = s.UpdateServiceInstanceStatus(ctx, serviceInstanceResponse.ServiceInstanceID, ServiceLifecycleStateProvisioned)
	if err != nil {
		return subscription{}, errPayloadConversion
	}

	return subscription{
		SubscriptionId:    subscriptionPayload.SubscriptionID,
		ServiceInstanceId: serviceInstanceResponse.ServiceInstanceID,
	}, err
}

func (s *subscriptionService) DeleteSubscription(ctx context.Context, serviceInstanceId string) error {
	manageApi, err := manage.NewIntegration(ctx)

	if err != nil {
		return err
	}

	serviceInstanceResp, err := manageApi.GetServiceInstance(serviceInstanceId)

	if err != nil {
		return err
	}

	serviceInstance, _ := serviceInstanceResp.Payload.(*manage.ServiceInstanceResponse)

	_, err = manageApi.DeleteSubscription(serviceInstance.ServiceInstanceID)

	return nil
}

func (s *subscriptionService) UpdateServiceInstanceStatus(ctx context.Context, serviceInstanceId string, status string) error {
	manageApi, err := manage.NewIntegration(ctx)
	if err != nil {
		return err
	}

	lifeCycleStatus, err := getLifeCycleStatusFromTxStatus(status)
	if err != nil {
		return err
	}

	// mark service instance as deleting
	_, err = manageApi.UpdateServiceInstance(serviceInstanceId, nil, nil, map[string]string{
		"lifeCycleStatus": lifeCycleStatus,
		"txStatus":        status,
	})

	return err
}

func (s *subscriptionService) ServiceInstanceExists(ctx context.Context, serviceInstanceId string) (bool, error) {
	manageApi, err := manage.NewIntegration(ctx)

	if err != nil {
		return false, err
	}

	if _, err := manageApi.GetServiceInstance(serviceInstanceId); err != nil {
		return false, err
	}

	return true, nil
}

func newSubscriptionService(ctx context.Context) subscriptionServiceApi {
	service := serviceFromContext(ctx)
	if service == nil {
		service = &subscriptionService{
			subscriptionConverter: subscriptionConverter{},
		}
	}
	return service
}

func getLifeCycleStatusFromTxStatus(txStatus string) (string, error) {
	switch txStatus {
	case ServiceLifecycleStateDeleting:
		return "Deleting", nil
	case ServiceLifecycleStateOrdering:
		return "Ordering", nil
	case ServiceLifecycleStateProvisioned:
		return "Provisioned", nil
	case ServiceLifecycleStateProvisioning:
		return "Provisioning", nil
	case ServiceLifecycleStateOrderFailed:
		return "Order Failed", nil
	}

	return "", errors.Errorf("Unknown status %q", txStatus)
}
-- local/someservice.remote.yml --
remote.service.address: 192.168.1.2
local.tunnel.address: 10.11.12.13

spring.cloud:
  consul:
    host: ${remote.service.address}
    discovery.instanceId: local
    #discovery.ipaddress: ${local.tunnel.address}
  vault:
    host: ${remote.service.address}

spring.zipkin.base-url: http://${remote.service.address}:9411/
trace.reporter:
  url: ${spring.zipkin.base-url}api/v1/spans
-- manifest/.gitignore --
target/
resources/
-- manifest/assembly.xml --
<assembly xmlns="http://maven.apache.org/plugins/maven-assembly-plugin/assembly/1.1.2" 
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/plugins/maven-assembly-plugin/assembly/1.1.2 http://maven.apache.org/xsd/assembly-1.1.2.xsd">
  <id>resources</id>
  <formats>
    <format>zip</format>
  </formats>
  <fileSets>
    <fileSet>
      <directory>${project.basedir}/target/extra-resources</directory>
      <outputDirectory>/</outputDirectory>
      <excludes>
        <exclude>src/**</exclude>
        <exclude>test/**</exclude>
      </excludes>
    </fileSet>
    <fileSet>
      <directory>${project.basedir}/</directory>
      <outputDirectory>/src</outputDirectory>
      <excludes>
        <exclude>target/**</exclude>
      </excludes>
    </fileSet>
  </fileSets>
</assembly>
-- manifest/pom.xml --
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0     http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <name>someservice-manifest</name>
    <groupId>com.cisco.vms.manifest.${folder}</groupId>
    <artifactId>someservice-manifest</artifactId>
    <packaging>pom</packaging>
    <version>${version}-${build_number}</version>

    <properties>
        <folder>Build-Stable</folder>
    </properties>

    <scm>
        <connection>scm:git:https://cto-github.cisco.com/NFV-BU/vms-isolated.git</connection>
        <developerConnection>scm:git:https://cto-github.cisco.com/NFV-BU/vms-isolated.git</developerConnection>
        <tag>HEAD</tag>
        <url>https://cto-github.cisco.com/NFV-BU/vms-isolated.git</url>
    </scm>


    <build>

        <plugins>
            <plugin>
                <artifactId>maven-resources-plugin</artifactId>
                <version>3.1.0</version>
                <executions>
                    <execution>
                        <id>copy-resources</id>
                        <phase>initialize</phase>
                        <goals>
                            <goal>copy-resources</goal>
                        </goals>
                        <configuration>
                            <outputDirectory>${basedir}/target/extra-resources</outputDirectory>
                            <resources>
                                <resource>
                                    <directory>${basedir}/resources</directory>
                                    <filtering>true</filtering>
                                </resource>
                            </resources>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <!--
                This is what packages the deployment for others.
                -->
                <artifactId>maven-assembly-plugin</artifactId>
                <version>3.1.0</version>
                <configuration>
                    <descriptors>
                        <descriptor>assembly.xml</descriptor>
                    </descriptors>
                </configuration>
                <executions>
                    <execution>
                        <id>create-archive</id>
                        <phase>package</phase>
                        <goals>
                            <goal>single</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>buildnumber-maven-plugin</artifactId>
                <version>1.4</version>
                <executions>
                    <execution>
                        <phase>validate</phase>
                        <goals>
                            <goal>create</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <shortRevisionLength>0</shortRevisionLength>

                </configuration>
            </plugin>

        </plugins>

    </build>

    <distributionManagement>
        <repository>
            <id>symphony-release</id>
            <name>symphony-release</name>
            <url>https://engci-maven-master.cisco.com/artifactory/symphony-release</url>
        </repository>
        <snapshotRepository>
            <id>symphony-snapshot</id>
            <name>symphony-snapshot</name>
            <url>https://engci-maven-master.cisco.com/artifactory/symphony-snapshot</url>
        </snapshotRepository>
    </distributionManagement>

    <repositories>
        <repository>
            <id>virtual_repo</id>
            <url>https://engci-maven-master.cisco.com/artifactory/symphony-group/</url>
            <snapshots>
                <enabled>true</enabled>
            </snapshots>
        </repository>
    </repositories>

</project>
-- pkg/api/subscription.go --
package api

type SubscriptionCreateRequest struct {
	OfferId   string `json:"offerId"`
	TenantId  string `json:"tenantId"`
	ServiceId string `json:"serviceId"`
}

type SubscriptionCreateResponse struct {
	SubscriptonId     string `json:"subscriptionId"`
	ServiceInstanceId string `json:"serviceInstanceId"`
}
-- platform-common/servicelifecycle/manifest.json --
{
  "services": [
    {
      "name": "someservice-5.0.0-SNAPSHOT",
      "files": [
        "manifest.yml"
      ],
      "images": {
        "dockerhub.cisco.com/vms-platform-dev-docker/someservice:5.0.0-SNAPSHOT": "someservice-5.0.0-SNAPSHOT.tar.gz"
      }
    }
  ]
}
-- platform-common/servicelifecycle/manifest.yml --
---
Name: "someservice"
Type: Internal
Containers:
  - Name: "someservice"
    Version: "5.0.0-SNAPSHOT"
    Artifact: "someservice-5.0.0-SNAPSHOT.tar.gz"
    Port: 9999
    ContextPath: "/some"
    Check:
      Http:
        Scheme: "http"
        Host: "127.0.0.1"
        Path: "/some/admin/health"
      IntervalSec: 30
      TimeoutSec: 10
    Limits:
      Memory: "128Mi"
      CPU: "1"
    Command:
      - "/usr/bin/someservice"
      - "--profile"
      - "production"
    Endpoints:
      - "/swagger"
ConfigFiles: []
Infrastructure:
  Database:
    Type: Cockroach # or Cockroach
    Name: "someservice"
  Bus:
    Type: Kafka
    Topics: []
-- skaffold.yaml --
apiVersion: skaffold/v3
kind: Config
metadata:
  name: someservice

build:
  artifacts:
    - image: dockerhub.cisco.com/vms-platform-dev-docker/someservice
      custom:
        buildCommand: |
          export DOCKER_PUBLISHTAGS=devtest
          export DOCKER_TAGS_DEVTEST="${IMAGE}"
          make docker-debug docker-push

manifests:
  rawYaml:
    - deployments/kubernetes/minivms/someservice-deployment.yaml

profiles:
  - name: msxlite
    patches:
      - op: replace
        path: /manifests/rawYaml/0
        value: deployments/kubernetes/msxlite/someservice-deployment.yaml
    activation:
      - kubeContext: msxlite
      - env: SKAFFOLD_PROFILE=msxlite
