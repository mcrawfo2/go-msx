--- before/plain-root.txtar
+++ golden/generate-domain-beats-test.txtar
@@ -1472,4 +1472,5 @@
 	_ "cto-github.cisco.com/NFV-BU/go-msx-populator/populate"
 	"cto-github.cisco.com/NFV-BU/go-msx/app"
+	_ "cto-github.cisco.com/NFV-BU/someservice/internal/beater"
 	_ "cto-github.cisco.com/NFV-BU/someservice/internal/migrate"
 )
@@ -2315,4 +2316,521 @@
 	moul.io/banner v1.0.1 // indirect
 )
+-- someservice/internal/_meta/fields.yml --
+- key: someservice
+  title: Some Microservice
+  description: >
+    Contains fields generated by Some Microservice.
+  fields:
+    - name: deviceId
+      type: keyword
+      required: true
+      description: >
+        The MSX device instance id of the host being monitored.
+    - name: serviceId
+      type: keyword
+      required: true
+      description: >
+        The MSX service instance id to which belongs the host being
+        monitored.
+    - name: device
+      type: ip
+      required: true
+      description: >
+        The management IP address of the host being monitored.
+    - name: Failed
+      type: boolean
+      required: false
+      description: >
+        Probe operation failure flag.
+        - `true` if an error occurred executing the probe.
+    - name: duration.us
+      type: long
+      required: true
+      description: >
+        The period of the entire probe operation in microseconds.
+-- someservice/internal/beater/beater.go --
+package beater
+
+import (
+	"context"
+	"cto-github.cisco.com/NFV-BU/go-msx-beats/locker"
+	"cto-github.cisco.com/NFV-BU/go-msx-beats/meta"
+	"cto-github.cisco.com/NFV-BU/go-msx-beats/publisher"
+	"cto-github.cisco.com/NFV-BU/go-msx-beats/worker"
+	"cto-github.cisco.com/NFV-BU/go-msx/config"
+	"cto-github.cisco.com/NFV-BU/go-msx/log"
+	"cto-github.cisco.com/NFV-BU/go-msx/trace"
+	"cto-github.cisco.com/NFV-BU/go-msx/types"
+	"github.com/elastic/beats/v7/libbeat/common"
+	"github.com/pkg/errors"
+	"sort"
+	"time"
+)
+
+const (
+	FieldUs       = "us"
+	FieldDuration = "duration"
+)
+
+var logger = log.NewLogger("someservice.internal.beater")
+
+type Beater struct {
+	config       *BeatConfig
+	stateService *BeatStateService
+	locks        *locker.Locker
+}
+
+// Heartbeat main loop
+func (b *Beater) Run(ctx context.Context) {
+	logger.WithContext(ctx).Info("Running heartbeat loop")
+
+	ticker := time.NewTicker(b.config.Period)
+	defer ticker.Stop()
+
+	for {
+		select {
+		case <-ctx.Done():
+			return
+		case <-ticker.C:
+		}
+
+		batches := b.batches(ctx, b.stateService.RunningState.Hosts)
+		b.scheduleBatches(ctx, batches)
+	}
+}
+
+func (b *Beater) batches(ctx context.Context, allHosts []Host) [][]Host {
+	batches := make([][]Host, 0)
+	batchIdx := -1
+	batchSize := b.config.Batch.Size
+	if batchSize == 0 {
+		batchSize = len(allHosts)
+	}
+
+	hosts := make([]Host, 0)
+	for _, h := range allHosts {
+		hosts = append(hosts, h)
+	}
+	sort.SliceStable(hosts, func(i, j int) bool { return hosts[i].Id < hosts[j].Id })
+
+	for _, h := range hosts {
+		logger.WithContext(ctx).Debugf("Scheduling host: %s", h.Host)
+
+		if len(batches) > batchIdx || len(batches[batchIdx]) == batchSize {
+			batchIdx = batchIdx + 1
+			batches = append(batches, make([]Host, 0))
+		}
+		batches[batchIdx] = append(batches[batchIdx], h)
+	}
+
+	return batches
+}
+
+func (b *Beater) scheduleBatches(ctx context.Context, batches [][]Host) {
+	now := time.Now()
+	stride := b.config.Batch.Delay
+	scheduler := worker.NewScheduler()
+	for n := range batches {
+		logger.WithContext(ctx).Debugf("Scheduling batch: %d", n)
+
+		batch := batches[n]
+		for _, h := range batch {
+			scheduler.Schedule(ctx, now, b.hostAction(h))
+		}
+
+		now = now.Add(stride)
+	}
+}
+
+func (b *Beater) hostAction(h Host) types.ActionFunc {
+	return func(ctx context.Context) error {
+		defer worker.Recovery(logger)
+
+		ctx, span := trace.NewSpan(
+			trace.UntracedContextFromContext(ctx),
+			"probe")
+		span.SetTag(trace.FieldDeviceId, h.Id)
+		span.SetTag(trace.FieldServiceId, h.ServiceId)
+		span.SetTag(trace.FieldDeviceAddress, h.Host)
+		defer span.Finish()
+
+		// Ensure previous tasks have completed for this host
+		ok := b.locks.TestAndClaim(h.Host)
+		if !ok {
+			b.locks.Timeout(h.Host, 4)
+			return nil
+		}
+		defer b.locks.Release(h.Host)
+
+		if err := b.host(ctx, h); err != nil {
+			span.SetTag(trace.FieldError, err.Error())
+		}
+
+		return nil
+	}
+}
+
+func (b *Beater) host(ctx context.Context, h Host) (err error) {
+	logFields := h.NewLog()
+	logger.WithContext(ctx).
+		WithFields(logFields).
+		Infof("Retrieving metrics for device %q", h.Id)
+
+	startTime := time.Now()
+
+	var result = make(common.MapStr)
+
+	// Probe the host for a document
+	result, err = b.dummy(h)
+
+	// Apply the results to the event document
+	fields := h.NewEvent()
+	fields.Update(result)
+
+	// Apply failure to the event document if an error occurred
+	failed := err != nil
+	if failed {
+		logger.
+			WithContext(ctx).
+			WithError(err).
+			WithFields(logFields).
+			Errorf("Failed to retrieve metrics for device %q", h.Id)
+		fields[meta.FieldFailed] = true
+		fields.Put(meta.FieldErrorMessage, err.Error())
+	}
+
+	// Apply action duration to the event document
+	actionDuration := time.Now().Sub(startTime)
+	fields[FieldDuration] = valueMap(FieldUs, int64(actionDuration/time.Microsecond))
+
+	if publisherErr := publisher.Publish(ctx, startTime, fields); publisherErr != nil {
+		logger.
+			WithContext(ctx).
+			WithError(publisherErr).
+			WithFields(logFields).
+			Error("Failed to publish event")
+		if err == nil {
+			err = publisherErr
+		}
+	}
+
+	return
+}
+
+func valueMap(unit string, value interface{}) common.MapStr {
+	return common.MapStr{
+		unit: value,
+	}
+}
+
+func (b *Beater) dummy(host Host) (results common.MapStr, err error) {
+	return common.MapStr{
+		meta.FieldUp: true,
+	}, nil
+}
+
+func newBeater(ctx context.Context) (*Beater, error) {
+	beatConfig, err := newConfig(config.FromContext(ctx))
+	if err != nil {
+		return nil, errors.Wrap(err, "Failed to create config")
+	}
+
+	stateService, err := newStateService(ctx)
+	if err != nil {
+		return nil, errors.Wrap(err, "Failed to create state service")
+	}
+
+	return &Beater{
+		config:       beatConfig,
+		stateService: stateService,
+		locks:        locker.NewLocker(),
+	}, nil
+}
+-- someservice/internal/beater/config.go --
+package beater
+
+import (
+	"cto-github.cisco.com/NFV-BU/go-msx/config"
+	"time"
+)
+
+const (
+	configRoot = "someservice"
+)
+
+type BeatConfig struct {
+	Period  time.Duration `config:"default=60s"`
+	Timeout time.Duration `config:"default=5s"`
+	Batch   BatchConfig
+}
+
+type BatchConfig struct {
+	Size  int           `config:"default=1"`
+	Delay time.Duration `config:"default=6ms"`
+}
+
+func newConfig(cfg *config.Config) (*BeatConfig, error) {
+	var beatConfig BeatConfig
+	if err := cfg.Populate(&beatConfig, configRoot); err != nil {
+		return nil, err
+	}
+	return &beatConfig, nil
+}
+-- someservice/internal/beater/init.go --
+package beater
+
+import (
+	"context"
+	"cto-github.cisco.com/NFV-BU/go-msx-beats/meta"
+	"cto-github.cisco.com/NFV-BU/go-msx/app"
+)
+
+func init() {
+	var beater *Beater
+
+	meta.SetFieldsResource("/internal/_meta/fields.yml")
+
+	app.OnEvent(app.EventCommand, app.CommandRoot, func(ctx context.Context) error {
+		app.OnEvent(app.EventStart, app.PhaseBefore, func(ctx context.Context) (err error) {
+			beater, err = newBeater(ctx)
+			return
+		})
+
+		app.OnEvent(app.EventReady, app.PhaseDuring, func(ctx context.Context) error {
+			go beater.Run(ctx)
+			return nil
+		})
+
+		return nil
+	})
+}
+-- someservice/internal/beater/state.go --
+package beater
+
+import (
+	"context"
+	"cto-github.cisco.com/NFV-BU/go-msx-beats/meta"
+	"cto-github.cisco.com/NFV-BU/go-msx-beats/state"
+	"cto-github.cisco.com/NFV-BU/go-msx-beats/webconfig"
+	"cto-github.cisco.com/NFV-BU/go-msx/trace"
+	"cto-github.cisco.com/NFV-BU/go-msx/types"
+	"cto-github.cisco.com/NFV-BU/someservice/pkg/api"
+	"encoding/json"
+	"github.com/elastic/beats/v7/libbeat/common"
+	"github.com/pkg/errors"
+)
+
+func init() {
+	webconfig.SetDeviceDto(api.DeviceDTO{})
+	webconfig.SetDeviceDtoList([]api.DeviceDTO{})
+	webconfig.SetHostDto(Host{})
+	webconfig.SetHostDtoList([]Host{})
+}
+
+type BeatState struct {
+	Hosts []Host
+}
+
+type Host struct {
+	Id        string   `config:"id" json:"id"`
+	ServiceId string   `config:"serviceId" json:"serviceId"`
+	Host      string   `config:"host" json:"host"`
+	Tags      []string `config:"tags" json:"tags"`
+}
+
+func (h Host) NewEvent() common.MapStr {
+	return map[string]interface{}{
+		meta.FieldDeviceAddress: h.Host,
+		meta.FieldDeviceId:      h.Id,
+		meta.FieldServiceId:     h.ServiceId,
+		meta.FieldTags:          h.Tags,
+	}
+}
+
+func (h Host) NewLog() map[string]interface{} {
+	return map[string]interface{}{
+		trace.FieldDeviceAddress: h.Host,
+		trace.FieldDeviceId:      h.Id,
+		trace.FieldServiceId:     h.ServiceId,
+	}
+}
+
+type BeatStateService struct {
+	RunningState   *BeatState
+	CandidateState *BeatState
+	store          state.Store
+	worker         *types.Worker
+}
+
+func (s *BeatStateService) Candidate(_ context.Context) interface{} {
+	return s.CandidateState.Hosts
+}
+
+func (s *BeatStateService) Commit(ctx context.Context) error {
+	logger.WithContext(ctx).Info("Committing candidate to running state")
+	return s.worker.Run(func(_ context.Context) error {
+		s.RunningState = &BeatState{
+			Hosts: s.CandidateState.Hosts,
+		}
+		return s.store.Save(ctx, s.RunningState.Hosts)
+	})
+}
+
+func (s *BeatStateService) Init(ctx context.Context) (err error) {
+	logger.WithContext(ctx).Info("Loading running state")
+	var data []byte
+	var initState *BeatState
+
+	if data, err = s.store.Get(ctx); err != nil {
+		return errors.Wrap(err, "Failed to load state")
+	}
+
+	if initState, err = unmarshalState(data); err != nil {
+		return errors.Wrap(err, "Failed to unmarshal state")
+	}
+
+	logger.WithContext(ctx).Debugf("Loaded state: %v", initState)
+
+	s.RunningState = initState
+	s.CandidateState = &BeatState{}
+	return
+}
+
+func (s *BeatStateService) Running(ctx context.Context) interface{} {
+	return s.RunningState.Hosts
+}
+
+func (s *BeatStateService) SetCandidate(ctx context.Context, data []byte) (err error) {
+	logger.WithContext(ctx).Info("Setting candidate state")
+
+	var candidateState *BeatState
+	var devices []api.DeviceDTO
+
+	if err = json.Unmarshal(data, &devices); err != nil {
+		return errors.Wrap(err, "Failed to unmarshal devices")
+	}
+
+	if candidateState, err = mapDeviceStates(devices); err != nil {
+		return errors.Wrap(err, "Failed to map device state")
+	}
+
+	s.CandidateState = candidateState
+	return
+}
+
+func (s *BeatStateService) UnsetRunning(ctx context.Context) error {
+	logger.WithContext(ctx).Info("Clearing running state")
+	return s.worker.Run(func(_ context.Context) error {
+		s.RunningState = &BeatState{Hosts: []Host{}}
+		return s.store.Save(ctx, s.RunningState.Hosts)
+	})
+}
+
+func (s *BeatStateService) ExtendRunning(ctx context.Context, data []byte) (err error) {
+	logger.WithContext(ctx).Info("Extending running state to candidate state")
+
+	var device api.DeviceDTO
+
+	if err = json.Unmarshal(data, &device); err != nil {
+		return errors.Wrap(err, "Failed to unmarshal device")
+	}
+
+	var candidateHost Host
+	if candidateHost, err = mapDeviceState(device); err != nil {
+		return errors.Wrap(err, "Failed to map device state")
+	}
+
+	return s.worker.Run(func(_ context.Context) error {
+		var newState *BeatState
+		if newState, err = s.copyRunningStateWithoutDevice(candidateHost.Id); err != nil {
+			return errors.Wrap(err, "Failed to copy running state to candidate state")
+		}
+
+		newState.Hosts = append(newState.Hosts, candidateHost)
+		s.RunningState = newState
+		return s.store.Save(ctx, s.RunningState.Hosts)
+	})
+}
+
+func (s *BeatStateService) ShrinkRunning(ctx context.Context, deviceId string) (err error) {
+	logger.WithContext(ctx).Info("Shrinking running state to candidate state")
+
+	return s.worker.Run(func(_ context.Context) error {
+		var newState *BeatState
+		if newState, err = s.copyRunningStateWithoutDevice(deviceId); err != nil {
+			return errors.Wrap(err, "Failed to copy running state to candidate state")
+		}
+
+		s.RunningState = newState
+		return s.store.Save(ctx, s.RunningState.Hosts)
+	})
+}
+
+func (s *BeatStateService) copyRunningStateWithoutDevice(deviceId string) (*BeatState, error) {
+	// Copy the running config to the a new config and filter any existing version of this device
+	var newState = new(BeatState)
+	var newHosts = make([]Host, len(s.RunningState.Hosts))
+	var n = 0
+	for i, h := range s.RunningState.Hosts {
+		if h.Id != deviceId {
+			newHosts[i-n] = h
+		} else {
+			n = n + 1
+		}
+	}
+	newState.Hosts = newHosts[:len(newHosts)-n]
+	return newState, nil
+}
+
+func mapDeviceStates(d []api.DeviceDTO) (*BeatState, error) {
+	var c BeatState
+	for _, v := range d {
+		host, err := mapDeviceState(v)
+		if err != nil {
+			return nil, errors.Wrap(err, "Failed to map device state")
+		}
+		c.Hosts = append(c.Hosts, host)
+	}
+	return &c, nil
+}
+
+func mapDeviceState(v api.DeviceDTO) (h Host, err error) {
+	h.Id = v.DeviceId
+	h.ServiceId = v.ServiceId
+	h.Host = v.Ip
+	h.Tags = v.Tags
+	return h, nil
+}
+
+func unmarshalState(data []byte) (*BeatState, error) {
+	var h []Host
+	if data == nil {
+		data = []byte("[]")
+	}
+	err := json.Unmarshal(data, &h)
+	if err != nil {
+		return nil, errors.Wrap(err, "Failed to deserialize hosts")
+	}
+
+	return &BeatState{
+		Hosts: h,
+	}, nil
+}
+
+func newStateService(ctx context.Context) (*BeatStateService, error) {
+	store, err := state.NewStateStore(ctx)
+	if err != nil {
+		return nil, err
+	}
+
+	result := &BeatStateService{
+		store:  store,
+		worker: types.NewWorker(ctx),
+	}
+
+	webconfig.RegisterService(result)
+
+	return result, nil
+}
 -- someservice/internal/empty_test.go --
 package internal
@@ -2510,4 +3028,24 @@
 
 </project>
+-- someservice/pkg/api/device.go --
+package api
+
+type DeviceDTO struct {
+	// Deprecated
+	Id        string           `json:"id"`
+	DeviceId  string           `json:"deviceId"`
+	ServiceId string           `json:"serviceId"`
+	Ip        string           `json:"ip"`
+	Metrics   DeviceMetricsDTO `json:"metrics,omitempty"`
+	Tags      []string         `json:"tags,omitempty"`
+}
+
+type DeviceMetricsDTO struct {
+	BeatMetricsDTO `json:""`
+}
+
+type BeatMetricsDTO struct {
+	// TODO: add beat device config
+}
 -- someservice/skaffold.yaml --
 apiVersion: skaffold/v3
