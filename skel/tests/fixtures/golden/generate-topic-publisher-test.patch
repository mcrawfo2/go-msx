--- before/plain-root.txtar
+++ golden/generate-topic-publisher-test.txtar
@@ -1473,4 +1473,5 @@
 	"cto-github.cisco.com/NFV-BU/go-msx/app"
 	_ "cto-github.cisco.com/NFV-BU/someservice/internal/migrate"
+	_ "cto-github.cisco.com/NFV-BU/someservice/internal/stream/weasels"
 )
 
@@ -2351,4 +2352,167 @@
 	_ "cto-github.cisco.com/NFV-BU/someservice/internal/migrate/V5_0_0"
 )
+-- someservice/internal/stream/weasels/mock_producer_weasel.go --
+// Code generated by mockery v2.21.1. DO NOT EDIT.
+
+package weasels
+
+import (
+	api "cto-github.cisco.com/NFV-BU/someservice/pkg/api"
+	mock "github.com/stretchr/testify/mock"
+)
+
+// MockWeaselMessageProducer is an autogenerated mock type for the WeaselMessageProducer type
+type MockWeaselMessageProducer struct {
+	mock.Mock
+}
+
+// Produce provides a mock function with given fields:
+func (_m *MockWeaselMessageProducer) Produce() api.WeaselMessage {
+	ret := _m.Called()
+
+	var r0 api.WeaselMessage
+	if rf, ok := ret.Get(0).(func() api.WeaselMessage); ok {
+		r0 = rf()
+	} else {
+		r0 = ret.Get(0).(api.WeaselMessage)
+	}
+
+	return r0
+}
+
+type mockConstructorTestingTNewMockWeaselMessageProducer interface {
+	mock.TestingT
+	Cleanup(func())
+}
+
+// NewMockWeaselMessageProducer creates a new instance of MockWeaselMessageProducer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
+func NewMockWeaselMessageProducer(t mockConstructorTestingTNewMockWeaselMessageProducer) *MockWeaselMessageProducer {
+	mock := &MockWeaselMessageProducer{}
+	mock.Mock.Test(t)
+
+	t.Cleanup(func() { mock.AssertExpectations(t) })
+
+	return mock
+}
+-- someservice/internal/stream/weasels/mock_publisher_weasel.go --
+// Code generated by mockery v2.21.1. DO NOT EDIT.
+
+package weasels
+
+import (
+	context "context"
+
+	types "cto-github.cisco.com/NFV-BU/go-msx/types"
+	mock "github.com/stretchr/testify/mock"
+)
+
+// MockWeaselPublisher is an autogenerated mock type for the WeaselPublisherApi type
+type MockWeaselPublisher struct {
+	mock.Mock
+}
+
+// PublishWeasel provides a mock function with given fields: ctx, id, data
+func (_m *MockWeaselPublisher) PublishWeasel(ctx context.Context, id types.UUID, data string) error {
+	ret := _m.Called(ctx, id, data)
+
+	var r0 error
+	if rf, ok := ret.Get(0).(func(context.Context, types.UUID, string) error); ok {
+		r0 = rf(ctx, id, data)
+	} else {
+		r0 = ret.Error(0)
+	}
+
+	return r0
+}
+
+type mockConstructorTestingTNewMockWeaselPublisher interface {
+	mock.TestingT
+	Cleanup(func())
+}
+
+// NewMockWeaselPublisher creates a new instance of MockWeaselPublisher. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
+func NewMockWeaselPublisher(t mockConstructorTestingTNewMockWeaselPublisher) *MockWeaselPublisher {
+	mock := &MockWeaselPublisher{}
+	mock.Mock.Test(t)
+
+	t.Cleanup(func() { mock.AssertExpectations(t) })
+
+	return mock
+}
+-- someservice/internal/stream/weasels/pkg.go --
+package weasels
+
+import "cto-github.cisco.com/NFV-BU/go-msx/log"
+
+type contextKey string
+
+var logger = log.NewLogger("someservice.internal.stream.weasels")
+
+const (
+	topicWeasel = "WEASEL_TOPIC"
+)
+-- someservice/internal/stream/weasels/publisher_weasel.go --
+//go:generate mockery --inpackage --name=WeaselPublisherApi --structname=MockWeaselPublisher --filename mock_publisher_weasel.go
+//go:generate mockery --inpackage --name=WeaselMessageProducer --structname=MockWeaselMessageProducer --filename mock_producer_weasel.go
+package weasels
+
+import (
+	"context"
+	"cto-github.cisco.com/NFV-BU/go-msx/stream"
+
+	"cto-github.cisco.com/NFV-BU/go-msx/types"
+	"cto-github.cisco.com/NFV-BU/someservice/pkg/api"
+)
+
+const (
+	contextKeyWeaselPublisher = contextKey("WeaselPublisher")
+)
+
+type WeaselPublisherApi interface {
+	PublishWeasel(ctx context.Context, id types.UUID, data string) error
+}
+
+type weaselPublisher struct {
+	publisherService stream.PublisherService
+}
+
+type WeaselMessageProducer interface {
+	Produce() api.WeaselMessage
+}
+
+func (p *weaselPublisher) PublishWeasel(ctx context.Context, id types.UUID, data string) error {
+	return p.PublishWeaselMessage(ctx, api.WeaselMessage{
+		Id:   id,
+		Data: data,
+	})
+}
+
+func (p *weaselPublisher) PublishWeaselMessage(ctx context.Context, msg api.WeaselMessage) error {
+	logger.WithContext(ctx).Debugf("Publishing message for weasels %q", msg.Id.String())
+	return p.publisherService.PublishObject(ctx, topicWeasel, msg, nil)
+}
+
+func (p *weaselPublisher) PublishWeaselFromProducer(ctx context.Context, producer WeaselMessageProducer) error {
+	return p.PublishWeaselMessage(ctx, producer.Produce())
+}
+
+func newWeaselPublisher(ctx context.Context) WeaselPublisherApi {
+	publisher := WeaselPublisherFromContext(ctx)
+	if publisher == nil {
+		return &weaselPublisher{
+			publisherService: stream.PublisherServiceFromContext(ctx),
+		}
+	}
+	return publisher
+}
+
+func WeaselPublisherFromContext(ctx context.Context) WeaselPublisherApi {
+	value, _ := ctx.Value(contextKeyWeaselPublisher).(WeaselPublisherApi)
+	return value
+}
+
+func ContextWithWeaselPublisher(ctx context.Context, publisher WeaselPublisherApi) context.Context {
+	return context.WithValue(ctx, contextKeyWeaselPublisher, publisher)
+}
 -- someservice/local/someservice.remote.yml --
 remote.service.address: 192.168.1.2
@@ -2510,4 +2674,13 @@
 
 </project>
+-- someservice/pkg/api/weasel_message.go --
+package api
+
+import "cto-github.cisco.com/NFV-BU/go-msx/types"
+
+type WeaselMessage struct {
+	Id   types.UUID `json:"id"`
+	Data string     `json:"data"`
+}
 -- someservice/skaffold.yaml --
 apiVersion: skaffold/v3
