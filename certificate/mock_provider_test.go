// Code generated by mockery v2.22.1. DO NOT EDIT.

package certificate

import (
	context "context"
	tls "crypto/tls"

	mock "github.com/stretchr/testify/mock"

	x509 "crypto/x509"
)

// mockProvider is an autogenerated mock type for the Provider type
type mockProvider struct {
	mock.Mock
}

// GetCaCertificate provides a mock function with given fields: ctx
func (_m *mockProvider) GetCaCertificate(ctx context.Context) (*x509.Certificate, error) {
	ret := _m.Called(ctx)

	var r0 *x509.Certificate
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*x509.Certificate, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *x509.Certificate); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*x509.Certificate)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCertificate provides a mock function with given fields: ctx
func (_m *mockProvider) GetCertificate(ctx context.Context) (*tls.Certificate, error) {
	ret := _m.Called(ctx)

	var r0 *tls.Certificate
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*tls.Certificate, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *tls.Certificate); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tls.Certificate)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Renewable provides a mock function with given fields:
func (_m *mockProvider) Renewable() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

type mockConstructorTestingTnewMockProvider interface {
	mock.TestingT
	Cleanup(func())
}

// newMockProvider creates a new instance of mockProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func newMockProvider(t mockConstructorTestingTnewMockProvider) *mockProvider {
	mock := &mockProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
