// Code generated by mockery v2.14.0. DO NOT EDIT.

package certificate

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// mockProviderFactory is an autogenerated mock type for the ProviderFactory type
type mockProviderFactory struct {
	mock.Mock
}

// Name provides a mock function with given fields:
func (_m *mockProviderFactory) Name() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// New provides a mock function with given fields: ctx, configRoot
func (_m *mockProviderFactory) New(ctx context.Context, configRoot string) (Provider, error) {
	ret := _m.Called(ctx, configRoot)

	var r0 Provider
	if rf, ok := ret.Get(0).(func(context.Context, string) Provider); ok {
		r0 = rf(ctx, configRoot)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(Provider)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, configRoot)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTnewMockProviderFactory interface {
	mock.TestingT
	Cleanup(func())
}

// newMockProviderFactory creates a new instance of mockProviderFactory. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func newMockProviderFactory(t mockConstructorTestingTnewMockProviderFactory) *mockProviderFactory {
	mock := &mockProviderFactory{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
