// Code generated by mockery v2.3.0. DO NOT EDIT.

package transit

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockProvider is an autogenerated mock type for the Provider type
type MockProvider struct {
	mock.Mock
}

// CreateKey provides a mock function with given fields: ctx, keyName
func (_m *MockProvider) CreateKey(ctx context.Context, keyName string) error {
	ret := _m.Called(ctx, keyName)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, keyName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Decrypt provides a mock function with given fields: ctx, secureValue
func (_m *MockProvider) Decrypt(ctx context.Context, secureValue Value) (Value, error) {
	ret := _m.Called(ctx, secureValue)

	var r0 Value
	if rf, ok := ret.Get(0).(func(context.Context, Value) Value); ok {
		r0 = rf(ctx, secureValue)
	} else {
		r0 = ret.Get(0).(Value)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, Value) error); ok {
		r1 = rf(ctx, secureValue)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DecryptBulk provides a mock function with given fields: ctx, secureValues
func (_m *MockProvider) DecryptBulk(ctx context.Context, secureValues []Value) ([]Value, error) {
	ret := _m.Called(ctx, secureValues)

	var r0 []Value
	if rf, ok := ret.Get(0).(func(context.Context, []Value) []Value); ok {
		r0 = rf(ctx, secureValues)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]Value)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, []Value) error); ok {
		r1 = rf(ctx, secureValues)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Encrypt provides a mock function with given fields: ctx, secureValue
func (_m *MockProvider) Encrypt(ctx context.Context, value Value) (Value, error) {
	ret := _m.Called(ctx, value)

	var r0 Value
	if rf, ok := ret.Get(0).(func(context.Context, Value) Value); ok {
		r0 = rf(ctx, value)
	} else {
		r0 = ret.Get(0).(Value)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, Value) error); ok {
		r1 = rf(ctx, value)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
