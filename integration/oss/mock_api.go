// Code generated by mockery v2.22.1. DO NOT EDIT.

package oss

import (
	types "cto-github.cisco.com/NFV-BU/go-msx/types"
	mock "github.com/stretchr/testify/mock"
)

// MockOss is an autogenerated mock type for the Api type
type MockOss struct {
	mock.Mock
}

// GetAccessibleServices provides a mock function with given fields:
func (_m *MockOss) GetAccessibleServices() (ServicesResponse, error) {
	ret := _m.Called()

	var r0 ServicesResponse
	var r1 error
	if rf, ok := ret.Get(0).(func() (ServicesResponse, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() ServicesResponse); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(ServicesResponse)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllowedValues provides a mock function with given fields: serviceId, propertyName
func (_m *MockOss) GetAllowedValues(serviceId string, propertyName string) (AllowedValuesResponse, error) {
	ret := _m.Called(serviceId, propertyName)

	var r0 AllowedValuesResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (AllowedValuesResponse, error)); ok {
		return rf(serviceId, propertyName)
	}
	if rf, ok := ret.Get(0).(func(string, string) AllowedValuesResponse); ok {
		r0 = rf(serviceId, propertyName)
	} else {
		r0 = ret.Get(0).(AllowedValuesResponse)
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(serviceId, propertyName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPricePlanOptions provides a mock function with given fields: serviceId, offerId, options
func (_m *MockOss) GetPricePlanOptions(serviceId types.UUID, offerId types.UUID, options PricingOptionsRequest) (PricingOptionsResponse, error) {
	ret := _m.Called(serviceId, offerId, options)

	var r0 PricingOptionsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(types.UUID, types.UUID, PricingOptionsRequest) (PricingOptionsResponse, error)); ok {
		return rf(serviceId, offerId, options)
	}
	if rf, ok := ret.Get(0).(func(types.UUID, types.UUID, PricingOptionsRequest) PricingOptionsResponse); ok {
		r0 = rf(serviceId, offerId, options)
	} else {
		r0 = ret.Get(0).(PricingOptionsResponse)
	}

	if rf, ok := ret.Get(1).(func(types.UUID, types.UUID, PricingOptionsRequest) error); ok {
		r1 = rf(serviceId, offerId, options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewMockOss interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockOss creates a new instance of MockOss. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockOss(t mockConstructorTestingTNewMockOss) *MockOss {
	mock := &MockOss{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
