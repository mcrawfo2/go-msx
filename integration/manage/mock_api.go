// Code generated by mockery v2.22.1. DO NOT EDIT.

package manage

import (
	integration "cto-github.cisco.com/NFV-BU/go-msx/integration"
	mock "github.com/stretchr/testify/mock"

	types "cto-github.cisco.com/NFV-BU/go-msx/types"
)

// MockManage is an autogenerated mock type for the Api type
type MockManage struct {
	mock.Mock
}

// AddDeviceTemplate provides a mock function with given fields: deviceTemplateCreateRequest
func (_m *MockManage) AddDeviceTemplate(deviceTemplateCreateRequest DeviceTemplateCreateRequest) (*integration.MsxResponse, error) {
	ret := _m.Called(deviceTemplateCreateRequest)

	var r0 *integration.MsxResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(DeviceTemplateCreateRequest) (*integration.MsxResponse, error)); ok {
		return rf(deviceTemplateCreateRequest)
	}
	if rf, ok := ret.Get(0).(func(DeviceTemplateCreateRequest) *integration.MsxResponse); ok {
		r0 = rf(deviceTemplateCreateRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*integration.MsxResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(DeviceTemplateCreateRequest) error); ok {
		r1 = rf(deviceTemplateCreateRequest)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddDeviceToSiteV3 provides a mock function with given fields: deviceId, siteId, notification
func (_m *MockManage) AddDeviceToSiteV3(deviceId string, siteId string, notification string) (*integration.MsxResponse, error) {
	ret := _m.Called(deviceId, siteId, notification)

	var r0 *integration.MsxResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, string) (*integration.MsxResponse, error)); ok {
		return rf(deviceId, siteId, notification)
	}
	if rf, ok := ret.Get(0).(func(string, string, string) *integration.MsxResponse); ok {
		r0 = rf(deviceId, siteId, notification)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*integration.MsxResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, string) error); ok {
		r1 = rf(deviceId, siteId, notification)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AttachDeviceTemplates provides a mock function with given fields: deviceId, attachTemplateRequest
func (_m *MockManage) AttachDeviceTemplates(deviceId string, attachTemplateRequest AttachTemplateRequest) (*integration.MsxResponse, error) {
	ret := _m.Called(deviceId, attachTemplateRequest)

	var r0 *integration.MsxResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string, AttachTemplateRequest) (*integration.MsxResponse, error)); ok {
		return rf(deviceId, attachTemplateRequest)
	}
	if rf, ok := ret.Get(0).(func(string, AttachTemplateRequest) *integration.MsxResponse); ok {
		r0 = rf(deviceId, attachTemplateRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*integration.MsxResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string, AttachTemplateRequest) error); ok {
		r1 = rf(deviceId, attachTemplateRequest)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ConnectControlPlane provides a mock function with given fields: controlPlaneId
func (_m *MockManage) ConnectControlPlane(controlPlaneId string) (*integration.MsxResponse, error) {
	ret := _m.Called(controlPlaneId)

	var r0 *integration.MsxResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*integration.MsxResponse, error)); ok {
		return rf(controlPlaneId)
	}
	if rf, ok := ret.Get(0).(func(string) *integration.MsxResponse); ok {
		r0 = rf(controlPlaneId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*integration.MsxResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(controlPlaneId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ConnectUnmanagedControlPlane provides a mock function with given fields: username, password, url, resourceProvider, tlsInsecure
func (_m *MockManage) ConnectUnmanagedControlPlane(username string, password string, url string, resourceProvider string, tlsInsecure bool) (*integration.MsxResponse, error) {
	ret := _m.Called(username, password, url, resourceProvider, tlsInsecure)

	var r0 *integration.MsxResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, string, string, bool) (*integration.MsxResponse, error)); ok {
		return rf(username, password, url, resourceProvider, tlsInsecure)
	}
	if rf, ok := ret.Get(0).(func(string, string, string, string, bool) *integration.MsxResponse); ok {
		r0 = rf(username, password, url, resourceProvider, tlsInsecure)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*integration.MsxResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, string, string, bool) error); ok {
		r1 = rf(username, password, url, resourceProvider, tlsInsecure)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateControlPlane provides a mock function with given fields: tenantId, name, url, resourceProvider, authenticationType, tlsInsecure, attributes
func (_m *MockManage) CreateControlPlane(tenantId string, name string, url string, resourceProvider string, authenticationType string, tlsInsecure bool, attributes map[string]string) (*integration.MsxResponse, error) {
	ret := _m.Called(tenantId, name, url, resourceProvider, authenticationType, tlsInsecure, attributes)

	var r0 *integration.MsxResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, string, string, string, bool, map[string]string) (*integration.MsxResponse, error)); ok {
		return rf(tenantId, name, url, resourceProvider, authenticationType, tlsInsecure, attributes)
	}
	if rf, ok := ret.Get(0).(func(string, string, string, string, string, bool, map[string]string) *integration.MsxResponse); ok {
		r0 = rf(tenantId, name, url, resourceProvider, authenticationType, tlsInsecure, attributes)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*integration.MsxResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, string, string, string, bool, map[string]string) error); ok {
		r1 = rf(tenantId, name, url, resourceProvider, authenticationType, tlsInsecure, attributes)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateDeviceActions provides a mock function with given fields: deviceActionList
func (_m *MockManage) CreateDeviceActions(deviceActionList DeviceActionCreateRequests) (*integration.MsxResponse, error) {
	ret := _m.Called(deviceActionList)

	var r0 *integration.MsxResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(DeviceActionCreateRequests) (*integration.MsxResponse, error)); ok {
		return rf(deviceActionList)
	}
	if rf, ok := ret.Get(0).(func(DeviceActionCreateRequests) *integration.MsxResponse); ok {
		r0 = rf(deviceActionList)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*integration.MsxResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(DeviceActionCreateRequests) error); ok {
		r1 = rf(deviceActionList)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateDeviceConnection provides a mock function with given fields: deviceConnection
func (_m *MockManage) CreateDeviceConnection(deviceConnection DeviceConnectionCreateRequest) (*integration.MsxResponse, *DeviceConnectionResponse, error) {
	ret := _m.Called(deviceConnection)

	var r0 *integration.MsxResponse
	var r1 *DeviceConnectionResponse
	var r2 error
	if rf, ok := ret.Get(0).(func(DeviceConnectionCreateRequest) (*integration.MsxResponse, *DeviceConnectionResponse, error)); ok {
		return rf(deviceConnection)
	}
	if rf, ok := ret.Get(0).(func(DeviceConnectionCreateRequest) *integration.MsxResponse); ok {
		r0 = rf(deviceConnection)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*integration.MsxResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(DeviceConnectionCreateRequest) *DeviceConnectionResponse); ok {
		r1 = rf(deviceConnection)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*DeviceConnectionResponse)
		}
	}

	if rf, ok := ret.Get(2).(func(DeviceConnectionCreateRequest) error); ok {
		r2 = rf(deviceConnection)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// CreateDeviceV4 provides a mock function with given fields: deviceRequest
func (_m *MockManage) CreateDeviceV4(deviceRequest DeviceCreateRequest) (*integration.MsxResponse, error) {
	ret := _m.Called(deviceRequest)

	var r0 *integration.MsxResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(DeviceCreateRequest) (*integration.MsxResponse, error)); ok {
		return rf(deviceRequest)
	}
	if rf, ok := ret.Get(0).(func(DeviceCreateRequest) *integration.MsxResponse); ok {
		r0 = rf(deviceRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*integration.MsxResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(DeviceCreateRequest) error); ok {
		r1 = rf(deviceRequest)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateServiceInstance provides a mock function with given fields: subscriptionId, serviceInstanceId, serviceAttribute, serviceDefAttribute, status
func (_m *MockManage) CreateServiceInstance(subscriptionId string, serviceInstanceId string, serviceAttribute map[string]string, serviceDefAttribute map[string]string, status map[string]string) (*integration.MsxResponse, error) {
	ret := _m.Called(subscriptionId, serviceInstanceId, serviceAttribute, serviceDefAttribute, status)

	var r0 *integration.MsxResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, map[string]string, map[string]string, map[string]string) (*integration.MsxResponse, error)); ok {
		return rf(subscriptionId, serviceInstanceId, serviceAttribute, serviceDefAttribute, status)
	}
	if rf, ok := ret.Get(0).(func(string, string, map[string]string, map[string]string, map[string]string) *integration.MsxResponse); ok {
		r0 = rf(subscriptionId, serviceInstanceId, serviceAttribute, serviceDefAttribute, status)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*integration.MsxResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, map[string]string, map[string]string, map[string]string) error); ok {
		r1 = rf(subscriptionId, serviceInstanceId, serviceAttribute, serviceDefAttribute, status)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateSiteV3 provides a mock function with given fields: siteRequest
func (_m *MockManage) CreateSiteV3(siteRequest SiteCreateRequest) (*integration.MsxResponse, error) {
	ret := _m.Called(siteRequest)

	var r0 *integration.MsxResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(SiteCreateRequest) (*integration.MsxResponse, error)); ok {
		return rf(siteRequest)
	}
	if rf, ok := ret.Get(0).(func(SiteCreateRequest) *integration.MsxResponse); ok {
		r0 = rf(siteRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*integration.MsxResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(SiteCreateRequest) error); ok {
		r1 = rf(siteRequest)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateSubscription provides a mock function with given fields: tenantId, serviceType, subscriptionName, subscriptionAttribute, offerDefAttribute, offerSelectionDetail, costAttribute
func (_m *MockManage) CreateSubscription(tenantId string, serviceType string, subscriptionName *string, subscriptionAttribute map[string]string, offerDefAttribute map[string]string, offerSelectionDetail map[string]string, costAttribute map[string]string) (*integration.MsxResponse, error) {
	ret := _m.Called(tenantId, serviceType, subscriptionName, subscriptionAttribute, offerDefAttribute, offerSelectionDetail, costAttribute)

	var r0 *integration.MsxResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, *string, map[string]string, map[string]string, map[string]string, map[string]string) (*integration.MsxResponse, error)); ok {
		return rf(tenantId, serviceType, subscriptionName, subscriptionAttribute, offerDefAttribute, offerSelectionDetail, costAttribute)
	}
	if rf, ok := ret.Get(0).(func(string, string, *string, map[string]string, map[string]string, map[string]string, map[string]string) *integration.MsxResponse); ok {
		r0 = rf(tenantId, serviceType, subscriptionName, subscriptionAttribute, offerDefAttribute, offerSelectionDetail, costAttribute)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*integration.MsxResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, *string, map[string]string, map[string]string, map[string]string, map[string]string) error); ok {
		r1 = rf(tenantId, serviceType, subscriptionName, subscriptionAttribute, offerDefAttribute, offerSelectionDetail, costAttribute)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteControlPlane provides a mock function with given fields: controlPlaneId
func (_m *MockManage) DeleteControlPlane(controlPlaneId string) (*integration.MsxResponse, error) {
	ret := _m.Called(controlPlaneId)

	var r0 *integration.MsxResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*integration.MsxResponse, error)); ok {
		return rf(controlPlaneId)
	}
	if rf, ok := ret.Get(0).(func(string) *integration.MsxResponse); ok {
		r0 = rf(controlPlaneId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*integration.MsxResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(controlPlaneId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteDeviceConnection provides a mock function with given fields: deviceConnectionId
func (_m *MockManage) DeleteDeviceConnection(deviceConnectionId string) (*integration.MsxResponse, error) {
	ret := _m.Called(deviceConnectionId)

	var r0 *integration.MsxResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*integration.MsxResponse, error)); ok {
		return rf(deviceConnectionId)
	}
	if rf, ok := ret.Get(0).(func(string) *integration.MsxResponse); ok {
		r0 = rf(deviceConnectionId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*integration.MsxResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(deviceConnectionId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteDeviceFromSiteV3 provides a mock function with given fields: deviceId, siteId
func (_m *MockManage) DeleteDeviceFromSiteV3(deviceId string, siteId string) (*integration.MsxResponse, error) {
	ret := _m.Called(deviceId, siteId)

	var r0 *integration.MsxResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (*integration.MsxResponse, error)); ok {
		return rf(deviceId, siteId)
	}
	if rf, ok := ret.Get(0).(func(string, string) *integration.MsxResponse); ok {
		r0 = rf(deviceId, siteId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*integration.MsxResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(deviceId, siteId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteDeviceTemplate provides a mock function with given fields: templateId
func (_m *MockManage) DeleteDeviceTemplate(templateId types.UUID) (*integration.MsxResponse, error) {
	ret := _m.Called(templateId)

	var r0 *integration.MsxResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(types.UUID) (*integration.MsxResponse, error)); ok {
		return rf(templateId)
	}
	if rf, ok := ret.Get(0).(func(types.UUID) *integration.MsxResponse); ok {
		r0 = rf(templateId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*integration.MsxResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(types.UUID) error); ok {
		r1 = rf(templateId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteDeviceV4 provides a mock function with given fields: deviceId, force
func (_m *MockManage) DeleteDeviceV4(deviceId string, force string) (*integration.MsxResponse, error) {
	ret := _m.Called(deviceId, force)

	var r0 *integration.MsxResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (*integration.MsxResponse, error)); ok {
		return rf(deviceId, force)
	}
	if rf, ok := ret.Get(0).(func(string, string) *integration.MsxResponse); ok {
		r0 = rf(deviceId, force)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*integration.MsxResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(deviceId, force)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteServiceInstance provides a mock function with given fields: serviceInstanceId
func (_m *MockManage) DeleteServiceInstance(serviceInstanceId string) (*integration.MsxResponse, error) {
	ret := _m.Called(serviceInstanceId)

	var r0 *integration.MsxResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*integration.MsxResponse, error)); ok {
		return rf(serviceInstanceId)
	}
	if rf, ok := ret.Get(0).(func(string) *integration.MsxResponse); ok {
		r0 = rf(serviceInstanceId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*integration.MsxResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(serviceInstanceId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteSiteV3 provides a mock function with given fields: siteId
func (_m *MockManage) DeleteSiteV3(siteId string) (*integration.MsxResponse, error) {
	ret := _m.Called(siteId)

	var r0 *integration.MsxResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*integration.MsxResponse, error)); ok {
		return rf(siteId)
	}
	if rf, ok := ret.Get(0).(func(string) *integration.MsxResponse); ok {
		r0 = rf(siteId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*integration.MsxResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(siteId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteSubscription provides a mock function with given fields: subscriptionId
func (_m *MockManage) DeleteSubscription(subscriptionId string) (*integration.MsxResponse, error) {
	ret := _m.Called(subscriptionId)

	var r0 *integration.MsxResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*integration.MsxResponse, error)); ok {
		return rf(subscriptionId)
	}
	if rf, ok := ret.Get(0).(func(string) *integration.MsxResponse); ok {
		r0 = rf(subscriptionId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*integration.MsxResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(subscriptionId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DetachDeviceTemplate provides a mock function with given fields: deviceId, templateId
func (_m *MockManage) DetachDeviceTemplate(deviceId string, templateId types.UUID) (*integration.MsxResponse, error) {
	ret := _m.Called(deviceId, templateId)

	var r0 *integration.MsxResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string, types.UUID) (*integration.MsxResponse, error)); ok {
		return rf(deviceId, templateId)
	}
	if rf, ok := ret.Get(0).(func(string, types.UUID) *integration.MsxResponse); ok {
		r0 = rf(deviceId, templateId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*integration.MsxResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string, types.UUID) error); ok {
		r1 = rf(deviceId, templateId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DetachDeviceTemplates provides a mock function with given fields: deviceId
func (_m *MockManage) DetachDeviceTemplates(deviceId string) (*integration.MsxResponse, error) {
	ret := _m.Called(deviceId)

	var r0 *integration.MsxResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*integration.MsxResponse, error)); ok {
		return rf(deviceId)
	}
	if rf, ok := ret.Get(0).(func(string) *integration.MsxResponse); ok {
		r0 = rf(deviceId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*integration.MsxResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(deviceId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAdminHealth provides a mock function with given fields:
func (_m *MockManage) GetAdminHealth() (*integration.MsxResponse, error) {
	ret := _m.Called()

	var r0 *integration.MsxResponse
	var r1 error
	if rf, ok := ret.Get(0).(func() (*integration.MsxResponse, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *integration.MsxResponse); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*integration.MsxResponse)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllControlPlanes provides a mock function with given fields: tenantId
func (_m *MockManage) GetAllControlPlanes(tenantId *string) (*integration.MsxResponse, error) {
	ret := _m.Called(tenantId)

	var r0 *integration.MsxResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(*string) (*integration.MsxResponse, error)); ok {
		return rf(tenantId)
	}
	if rf, ok := ret.Get(0).(func(*string) *integration.MsxResponse); ok {
		r0 = rf(tenantId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*integration.MsxResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(*string) error); ok {
		r1 = rf(tenantId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetControlPlane provides a mock function with given fields: controlPlaneId
func (_m *MockManage) GetControlPlane(controlPlaneId string) (*integration.MsxResponse, error) {
	ret := _m.Called(controlPlaneId)

	var r0 *integration.MsxResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*integration.MsxResponse, error)); ok {
		return rf(controlPlaneId)
	}
	if rf, ok := ret.Get(0).(func(string) *integration.MsxResponse); ok {
		r0 = rf(controlPlaneId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*integration.MsxResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(controlPlaneId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDeviceConfig provides a mock function with given fields: deviceInstanceId
func (_m *MockManage) GetDeviceConfig(deviceInstanceId string) (*integration.MsxResponse, error) {
	ret := _m.Called(deviceInstanceId)

	var r0 *integration.MsxResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*integration.MsxResponse, error)); ok {
		return rf(deviceInstanceId)
	}
	if rf, ok := ret.Get(0).(func(string) *integration.MsxResponse); ok {
		r0 = rf(deviceInstanceId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*integration.MsxResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(deviceInstanceId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDeviceTemplate provides a mock function with given fields: templateId
func (_m *MockManage) GetDeviceTemplate(templateId types.UUID) (*integration.MsxResponse, error) {
	ret := _m.Called(templateId)

	var r0 *integration.MsxResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(types.UUID) (*integration.MsxResponse, error)); ok {
		return rf(templateId)
	}
	if rf, ok := ret.Get(0).(func(types.UUID) *integration.MsxResponse); ok {
		r0 = rf(templateId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*integration.MsxResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(types.UUID) error); ok {
		r1 = rf(templateId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDeviceTemplateHistory provides a mock function with given fields: deviceInstanceId
func (_m *MockManage) GetDeviceTemplateHistory(deviceInstanceId string) (*integration.MsxResponse, error) {
	ret := _m.Called(deviceInstanceId)

	var r0 *integration.MsxResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*integration.MsxResponse, error)); ok {
		return rf(deviceInstanceId)
	}
	if rf, ok := ret.Get(0).(func(string) *integration.MsxResponse); ok {
		r0 = rf(deviceInstanceId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*integration.MsxResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(deviceInstanceId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDeviceV4 provides a mock function with given fields: deviceId
func (_m *MockManage) GetDeviceV4(deviceId string) (*integration.MsxResponse, error) {
	ret := _m.Called(deviceId)

	var r0 *integration.MsxResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*integration.MsxResponse, error)); ok {
		return rf(deviceId)
	}
	if rf, ok := ret.Get(0).(func(string) *integration.MsxResponse); ok {
		r0 = rf(deviceId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*integration.MsxResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(deviceId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDevicesV4 provides a mock function with given fields: requestQuery, page, pageSize
func (_m *MockManage) GetDevicesV4(requestQuery map[string][]string, page int, pageSize int) (*integration.MsxResponse, error) {
	ret := _m.Called(requestQuery, page, pageSize)

	var r0 *integration.MsxResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(map[string][]string, int, int) (*integration.MsxResponse, error)); ok {
		return rf(requestQuery, page, pageSize)
	}
	if rf, ok := ret.Get(0).(func(map[string][]string, int, int) *integration.MsxResponse); ok {
		r0 = rf(requestQuery, page, pageSize)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*integration.MsxResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(map[string][]string, int, int) error); ok {
		r1 = rf(requestQuery, page, pageSize)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetEntityShard provides a mock function with given fields: entityId
func (_m *MockManage) GetEntityShard(entityId string) (*integration.MsxResponse, error) {
	ret := _m.Called(entityId)

	var r0 *integration.MsxResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*integration.MsxResponse, error)); ok {
		return rf(entityId)
	}
	if rf, ok := ret.Get(0).(func(string) *integration.MsxResponse); ok {
		r0 = rf(entityId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*integration.MsxResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(entityId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLocationGeocode provides a mock function with given fields: location
func (_m *MockManage) GetLocationGeocode(location string) (*integration.MsxResponse, error) {
	ret := _m.Called(location)

	var r0 *integration.MsxResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*integration.MsxResponse, error)); ok {
		return rf(location)
	}
	if rf, ok := ret.Get(0).(func(string) *integration.MsxResponse); ok {
		r0 = rf(location)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*integration.MsxResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(location)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetServiceInstance provides a mock function with given fields: serviceInstanceId
func (_m *MockManage) GetServiceInstance(serviceInstanceId string) (*integration.MsxResponse, error) {
	ret := _m.Called(serviceInstanceId)

	var r0 *integration.MsxResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*integration.MsxResponse, error)); ok {
		return rf(serviceInstanceId)
	}
	if rf, ok := ret.Get(0).(func(string) *integration.MsxResponse); ok {
		r0 = rf(serviceInstanceId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*integration.MsxResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(serviceInstanceId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSiteV3 provides a mock function with given fields: siteId, showImage
func (_m *MockManage) GetSiteV3(siteId string, showImage string) (*integration.MsxResponse, error) {
	ret := _m.Called(siteId, showImage)

	var r0 *integration.MsxResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (*integration.MsxResponse, error)); ok {
		return rf(siteId, showImage)
	}
	if rf, ok := ret.Get(0).(func(string, string) *integration.MsxResponse); ok {
		r0 = rf(siteId, showImage)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*integration.MsxResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(siteId, showImage)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSitesV3 provides a mock function with given fields: siteFilters, page, pageSize
func (_m *MockManage) GetSitesV3(siteFilters SiteQueryFilter, page int, pageSize int) (*integration.MsxResponse, error) {
	ret := _m.Called(siteFilters, page, pageSize)

	var r0 *integration.MsxResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(SiteQueryFilter, int, int) (*integration.MsxResponse, error)); ok {
		return rf(siteFilters, page, pageSize)
	}
	if rf, ok := ret.Get(0).(func(SiteQueryFilter, int, int) *integration.MsxResponse); ok {
		r0 = rf(siteFilters, page, pageSize)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*integration.MsxResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(SiteQueryFilter, int, int) error); ok {
		r1 = rf(siteFilters, page, pageSize)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSubscription provides a mock function with given fields: subscriptionId
func (_m *MockManage) GetSubscription(subscriptionId string) (*integration.MsxResponse, error) {
	ret := _m.Called(subscriptionId)

	var r0 *integration.MsxResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*integration.MsxResponse, error)); ok {
		return rf(subscriptionId)
	}
	if rf, ok := ret.Get(0).(func(string) *integration.MsxResponse); ok {
		r0 = rf(subscriptionId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*integration.MsxResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(subscriptionId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSubscriptionServiceInstances provides a mock function with given fields: subscriptionId, page, pageSize
func (_m *MockManage) GetSubscriptionServiceInstances(subscriptionId string, page int, pageSize int) (*integration.MsxResponse, error) {
	ret := _m.Called(subscriptionId, page, pageSize)

	var r0 *integration.MsxResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string, int, int) (*integration.MsxResponse, error)); ok {
		return rf(subscriptionId, page, pageSize)
	}
	if rf, ok := ret.Get(0).(func(string, int, int) *integration.MsxResponse); ok {
		r0 = rf(subscriptionId, page, pageSize)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*integration.MsxResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string, int, int) error); ok {
		r1 = rf(subscriptionId, page, pageSize)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSubscriptionsV3 provides a mock function with given fields: serviceType, page, pageSize
func (_m *MockManage) GetSubscriptionsV3(serviceType string, page int, pageSize int) (*integration.MsxResponse, error) {
	ret := _m.Called(serviceType, page, pageSize)

	var r0 *integration.MsxResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string, int, int) (*integration.MsxResponse, error)); ok {
		return rf(serviceType, page, pageSize)
	}
	if rf, ok := ret.Get(0).(func(string, int, int) *integration.MsxResponse); ok {
		r0 = rf(serviceType, page, pageSize)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*integration.MsxResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string, int, int) error); ok {
		r1 = rf(serviceType, page, pageSize)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListDeviceTemplates provides a mock function with given fields: serviceType, tenantId
func (_m *MockManage) ListDeviceTemplates(serviceType string, tenantId *types.UUID) (*integration.MsxResponse, error) {
	ret := _m.Called(serviceType, tenantId)

	var r0 *integration.MsxResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string, *types.UUID) (*integration.MsxResponse, error)); ok {
		return rf(serviceType, tenantId)
	}
	if rf, ok := ret.Get(0).(func(string, *types.UUID) *integration.MsxResponse); ok {
		r0 = rf(serviceType, tenantId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*integration.MsxResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string, *types.UUID) error); ok {
		r1 = rf(serviceType, tenantId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateControlPlane provides a mock function with given fields: controlPlaneId, tenantId, name, url, resourceProvider, authenticationType, tlsInsecure, attributes
func (_m *MockManage) UpdateControlPlane(controlPlaneId string, tenantId string, name string, url string, resourceProvider string, authenticationType string, tlsInsecure bool, attributes map[string]string) (*integration.MsxResponse, error) {
	ret := _m.Called(controlPlaneId, tenantId, name, url, resourceProvider, authenticationType, tlsInsecure, attributes)

	var r0 *integration.MsxResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, string, string, string, string, bool, map[string]string) (*integration.MsxResponse, error)); ok {
		return rf(controlPlaneId, tenantId, name, url, resourceProvider, authenticationType, tlsInsecure, attributes)
	}
	if rf, ok := ret.Get(0).(func(string, string, string, string, string, string, bool, map[string]string) *integration.MsxResponse); ok {
		r0 = rf(controlPlaneId, tenantId, name, url, resourceProvider, authenticationType, tlsInsecure, attributes)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*integration.MsxResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, string, string, string, string, bool, map[string]string) error); ok {
		r1 = rf(controlPlaneId, tenantId, name, url, resourceProvider, authenticationType, tlsInsecure, attributes)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateDeviceActions provides a mock function with given fields: deviceActionList
func (_m *MockManage) UpdateDeviceActions(deviceActionList DeviceActionCreateRequests) (*integration.MsxResponse, error) {
	ret := _m.Called(deviceActionList)

	var r0 *integration.MsxResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(DeviceActionCreateRequests) (*integration.MsxResponse, error)); ok {
		return rf(deviceActionList)
	}
	if rf, ok := ret.Get(0).(func(DeviceActionCreateRequests) *integration.MsxResponse); ok {
		r0 = rf(deviceActionList)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*integration.MsxResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(DeviceActionCreateRequests) error); ok {
		r1 = rf(deviceActionList)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateDeviceStatusV4 provides a mock function with given fields: deviceStatus, deviceId
func (_m *MockManage) UpdateDeviceStatusV4(deviceStatus DeviceStatusUpdateRequest, deviceId string) (*integration.MsxResponse, error) {
	ret := _m.Called(deviceStatus, deviceId)

	var r0 *integration.MsxResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(DeviceStatusUpdateRequest, string) (*integration.MsxResponse, error)); ok {
		return rf(deviceStatus, deviceId)
	}
	if rf, ok := ret.Get(0).(func(DeviceStatusUpdateRequest, string) *integration.MsxResponse); ok {
		r0 = rf(deviceStatus, deviceId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*integration.MsxResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(DeviceStatusUpdateRequest, string) error); ok {
		r1 = rf(deviceStatus, deviceId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateDeviceV4 provides a mock function with given fields: deviceRequest, deviceId
func (_m *MockManage) UpdateDeviceV4(deviceRequest DeviceUpdateRequest, deviceId string) (*integration.MsxResponse, error) {
	ret := _m.Called(deviceRequest, deviceId)

	var r0 *integration.MsxResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(DeviceUpdateRequest, string) (*integration.MsxResponse, error)); ok {
		return rf(deviceRequest, deviceId)
	}
	if rf, ok := ret.Get(0).(func(DeviceUpdateRequest, string) *integration.MsxResponse); ok {
		r0 = rf(deviceRequest, deviceId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*integration.MsxResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(DeviceUpdateRequest, string) error); ok {
		r1 = rf(deviceRequest, deviceId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateServiceInstance provides a mock function with given fields: serviceInstanceId, serviceAttribute, serviceDefAttribute, status
func (_m *MockManage) UpdateServiceInstance(serviceInstanceId string, serviceAttribute map[string]string, serviceDefAttribute map[string]string, status map[string]string) (*integration.MsxResponse, error) {
	ret := _m.Called(serviceInstanceId, serviceAttribute, serviceDefAttribute, status)

	var r0 *integration.MsxResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string, map[string]string, map[string]string, map[string]string) (*integration.MsxResponse, error)); ok {
		return rf(serviceInstanceId, serviceAttribute, serviceDefAttribute, status)
	}
	if rf, ok := ret.Get(0).(func(string, map[string]string, map[string]string, map[string]string) *integration.MsxResponse); ok {
		r0 = rf(serviceInstanceId, serviceAttribute, serviceDefAttribute, status)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*integration.MsxResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string, map[string]string, map[string]string, map[string]string) error); ok {
		r1 = rf(serviceInstanceId, serviceAttribute, serviceDefAttribute, status)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateSiteStatusV3 provides a mock function with given fields: siteStatus, siteId
func (_m *MockManage) UpdateSiteStatusV3(siteStatus SiteStatusUpdateRequest, siteId string) (*integration.MsxResponse, error) {
	ret := _m.Called(siteStatus, siteId)

	var r0 *integration.MsxResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(SiteStatusUpdateRequest, string) (*integration.MsxResponse, error)); ok {
		return rf(siteStatus, siteId)
	}
	if rf, ok := ret.Get(0).(func(SiteStatusUpdateRequest, string) *integration.MsxResponse); ok {
		r0 = rf(siteStatus, siteId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*integration.MsxResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(SiteStatusUpdateRequest, string) error); ok {
		r1 = rf(siteStatus, siteId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateSiteV3 provides a mock function with given fields: siteRequest, siteId, notification
func (_m *MockManage) UpdateSiteV3(siteRequest SiteUpdateRequest, siteId string, notification string) (*integration.MsxResponse, error) {
	ret := _m.Called(siteRequest, siteId, notification)

	var r0 *integration.MsxResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(SiteUpdateRequest, string, string) (*integration.MsxResponse, error)); ok {
		return rf(siteRequest, siteId, notification)
	}
	if rf, ok := ret.Get(0).(func(SiteUpdateRequest, string, string) *integration.MsxResponse); ok {
		r0 = rf(siteRequest, siteId, notification)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*integration.MsxResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(SiteUpdateRequest, string, string) error); ok {
		r1 = rf(siteRequest, siteId, notification)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateSubscription provides a mock function with given fields: subscriptionId, serviceType, subscriptionName, subscriptionAttribute, offerDefAttribute, offerSelectionDetail, costAttribute
func (_m *MockManage) UpdateSubscription(subscriptionId string, serviceType string, subscriptionName *string, subscriptionAttribute map[string]string, offerDefAttribute map[string]string, offerSelectionDetail map[string]string, costAttribute map[string]string) (*integration.MsxResponse, error) {
	ret := _m.Called(subscriptionId, serviceType, subscriptionName, subscriptionAttribute, offerDefAttribute, offerSelectionDetail, costAttribute)

	var r0 *integration.MsxResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, *string, map[string]string, map[string]string, map[string]string, map[string]string) (*integration.MsxResponse, error)); ok {
		return rf(subscriptionId, serviceType, subscriptionName, subscriptionAttribute, offerDefAttribute, offerSelectionDetail, costAttribute)
	}
	if rf, ok := ret.Get(0).(func(string, string, *string, map[string]string, map[string]string, map[string]string, map[string]string) *integration.MsxResponse); ok {
		r0 = rf(subscriptionId, serviceType, subscriptionName, subscriptionAttribute, offerDefAttribute, offerSelectionDetail, costAttribute)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*integration.MsxResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, *string, map[string]string, map[string]string, map[string]string, map[string]string) error); ok {
		r1 = rf(subscriptionId, serviceType, subscriptionName, subscriptionAttribute, offerDefAttribute, offerSelectionDetail, costAttribute)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateTemplateAccess provides a mock function with given fields: templateId, deviceTemplateAccess
func (_m *MockManage) UpdateTemplateAccess(templateId string, deviceTemplateAccess DeviceTemplateAccess) (*integration.MsxResponse, error) {
	ret := _m.Called(templateId, deviceTemplateAccess)

	var r0 *integration.MsxResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string, DeviceTemplateAccess) (*integration.MsxResponse, error)); ok {
		return rf(templateId, deviceTemplateAccess)
	}
	if rf, ok := ret.Get(0).(func(string, DeviceTemplateAccess) *integration.MsxResponse); ok {
		r0 = rf(templateId, deviceTemplateAccess)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*integration.MsxResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string, DeviceTemplateAccess) error); ok {
		r1 = rf(templateId, deviceTemplateAccess)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewMockManage interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockManage creates a new instance of MockManage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockManage(t mockConstructorTestingTNewMockManage) *MockManage {
	mock := &MockManage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
