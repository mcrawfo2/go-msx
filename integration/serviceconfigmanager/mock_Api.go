// Code generated by mockery v2.14.0. DO NOT EDIT.

package serviceconfigmanager

import (
	integration "cto-github.cisco.com/NFV-BU/go-msx/integration"
	mock "github.com/stretchr/testify/mock"

	types "cto-github.cisco.com/NFV-BU/go-msx/types"
)

// MockServiceConfigManagerApi is an autogenerated mock type for the Api type
type MockServiceConfigManagerApi struct {
	mock.Mock
}

// CreateServiceConfiguration provides a mock function with given fields: configuration
func (_m *MockServiceConfigManagerApi) CreateServiceConfiguration(configuration ServiceConfigurationRequest) (*integration.MsxResponse, error) {
	ret := _m.Called(configuration)

	var r0 *integration.MsxResponse
	if rf, ok := ret.Get(0).(func(ServiceConfigurationRequest) *integration.MsxResponse); ok {
		r0 = rf(configuration)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*integration.MsxResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(ServiceConfigurationRequest) error); ok {
		r1 = rf(configuration)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateServiceConfigurationApplication provides a mock function with given fields: applicationRequest
func (_m *MockServiceConfigManagerApi) CreateServiceConfigurationApplication(applicationRequest ServiceConfigurationApplicationRequest) (*integration.MsxResponse, error) {
	ret := _m.Called(applicationRequest)

	var r0 *integration.MsxResponse
	if rf, ok := ret.Get(0).(func(ServiceConfigurationApplicationRequest) *integration.MsxResponse); ok {
		r0 = rf(applicationRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*integration.MsxResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(ServiceConfigurationApplicationRequest) error); ok {
		r1 = rf(applicationRequest)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateServiceConfigurationAssignment provides a mock function with given fields: serviceConfigId, tenantIdList
func (_m *MockServiceConfigManagerApi) CreateServiceConfigurationAssignment(serviceConfigId types.UUID, tenantIdList []types.UUID) (*integration.MsxResponse, error) {
	ret := _m.Called(serviceConfigId, tenantIdList)

	var r0 *integration.MsxResponse
	if rf, ok := ret.Get(0).(func(types.UUID, []types.UUID) *integration.MsxResponse); ok {
		r0 = rf(serviceConfigId, tenantIdList)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*integration.MsxResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(types.UUID, []types.UUID) error); ok {
		r1 = rf(serviceConfigId, tenantIdList)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteServiceConfiguration provides a mock function with given fields: serviceConfigId
func (_m *MockServiceConfigManagerApi) DeleteServiceConfiguration(serviceConfigId types.UUID) (*integration.MsxResponse, error) {
	ret := _m.Called(serviceConfigId)

	var r0 *integration.MsxResponse
	if rf, ok := ret.Get(0).(func(types.UUID) *integration.MsxResponse); ok {
		r0 = rf(serviceConfigId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*integration.MsxResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(types.UUID) error); ok {
		r1 = rf(serviceConfigId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteServiceConfigurationApplication provides a mock function with given fields: applicationId
func (_m *MockServiceConfigManagerApi) DeleteServiceConfigurationApplication(applicationId types.UUID) (*integration.MsxResponse, error) {
	ret := _m.Called(applicationId)

	var r0 *integration.MsxResponse
	if rf, ok := ret.Get(0).(func(types.UUID) *integration.MsxResponse); ok {
		r0 = rf(applicationId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*integration.MsxResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(types.UUID) error); ok {
		r1 = rf(applicationId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteServiceConfigurationAssignments provides a mock function with given fields: serviceConfigId, tenantIdList
func (_m *MockServiceConfigManagerApi) DeleteServiceConfigurationAssignments(serviceConfigId types.UUID, tenantIdList []types.UUID) (*integration.MsxResponse, error) {
	ret := _m.Called(serviceConfigId, tenantIdList)

	var r0 *integration.MsxResponse
	if rf, ok := ret.Get(0).(func(types.UUID, []types.UUID) *integration.MsxResponse); ok {
		r0 = rf(serviceConfigId, tenantIdList)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*integration.MsxResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(types.UUID, []types.UUID) error); ok {
		r1 = rf(serviceConfigId, tenantIdList)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAdminHealth provides a mock function with given fields:
func (_m *MockServiceConfigManagerApi) GetAdminHealth() (*HealthResult, error) {
	ret := _m.Called()

	var r0 *HealthResult
	if rf, ok := ret.Get(0).(func() *HealthResult); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*HealthResult)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllServiceConfigurationAssignments provides a mock function with given fields: page, pageSize, filterTenantId
func (_m *MockServiceConfigManagerApi) GetAllServiceConfigurationAssignments(page int, pageSize int, filterTenantId types.UUID) (*integration.MsxResponse, error) {
	ret := _m.Called(page, pageSize, filterTenantId)

	var r0 *integration.MsxResponse
	if rf, ok := ret.Get(0).(func(int, int, types.UUID) *integration.MsxResponse); ok {
		r0 = rf(page, pageSize, filterTenantId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*integration.MsxResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, int, types.UUID) error); ok {
		r1 = rf(page, pageSize, filterTenantId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetServiceConfigurationApplicationById provides a mock function with given fields: applicationId
func (_m *MockServiceConfigManagerApi) GetServiceConfigurationApplicationById(applicationId types.UUID) (*integration.MsxResponse, error) {
	ret := _m.Called(applicationId)

	var r0 *integration.MsxResponse
	if rf, ok := ret.Get(0).(func(types.UUID) *integration.MsxResponse); ok {
		r0 = rf(applicationId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*integration.MsxResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(types.UUID) error); ok {
		r1 = rf(applicationId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetServiceConfigurationApplicationByServiceConfigIdTargetEntityTypeAndTargetEntityId provides a mock function with given fields: serviceConfigId, targetEntityType, targetEntityId
func (_m *MockServiceConfigManagerApi) GetServiceConfigurationApplicationByServiceConfigIdTargetEntityTypeAndTargetEntityId(serviceConfigId types.UUID, targetEntityType string, targetEntityId string) (*integration.MsxResponse, error) {
	ret := _m.Called(serviceConfigId, targetEntityType, targetEntityId)

	var r0 *integration.MsxResponse
	if rf, ok := ret.Get(0).(func(types.UUID, string, string) *integration.MsxResponse); ok {
		r0 = rf(serviceConfigId, targetEntityType, targetEntityId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*integration.MsxResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(types.UUID, string, string) error); ok {
		r1 = rf(serviceConfigId, targetEntityType, targetEntityId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetServiceConfigurationApplications provides a mock function with given fields: page, pageSize, tenantId, serviceConfigId, sortBy, sortOrder, targetEntityId, targetEntityType
func (_m *MockServiceConfigManagerApi) GetServiceConfigurationApplications(page int, pageSize int, tenantId types.UUID, serviceConfigId types.UUID, sortBy *string, sortOrder *string, targetEntityId *string, targetEntityType *string) (*integration.MsxResponse, error) {
	ret := _m.Called(page, pageSize, tenantId, serviceConfigId, sortBy, sortOrder, targetEntityId, targetEntityType)

	var r0 *integration.MsxResponse
	if rf, ok := ret.Get(0).(func(int, int, types.UUID, types.UUID, *string, *string, *string, *string) *integration.MsxResponse); ok {
		r0 = rf(page, pageSize, tenantId, serviceConfigId, sortBy, sortOrder, targetEntityId, targetEntityType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*integration.MsxResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, int, types.UUID, types.UUID, *string, *string, *string, *string) error); ok {
		r1 = rf(page, pageSize, tenantId, serviceConfigId, sortBy, sortOrder, targetEntityId, targetEntityType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetServiceConfigurationAssignmentByAssignmentId provides a mock function with given fields: assignmentId
func (_m *MockServiceConfigManagerApi) GetServiceConfigurationAssignmentByAssignmentId(assignmentId types.UUID) (*integration.MsxResponse, error) {
	ret := _m.Called(assignmentId)

	var r0 *integration.MsxResponse
	if rf, ok := ret.Get(0).(func(types.UUID) *integration.MsxResponse); ok {
		r0 = rf(assignmentId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*integration.MsxResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(types.UUID) error); ok {
		r1 = rf(assignmentId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetServiceConfigurationAssignmentsByServiceConfigurationId provides a mock function with given fields: serviceConfigurationId, page, pageSize
func (_m *MockServiceConfigManagerApi) GetServiceConfigurationAssignmentsByServiceConfigurationId(serviceConfigurationId types.UUID, page int, pageSize int) (*integration.MsxResponse, error) {
	ret := _m.Called(serviceConfigurationId, page, pageSize)

	var r0 *integration.MsxResponse
	if rf, ok := ret.Get(0).(func(types.UUID, int, int) *integration.MsxResponse); ok {
		r0 = rf(serviceConfigurationId, page, pageSize)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*integration.MsxResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(types.UUID, int, int) error); ok {
		r1 = rf(serviceConfigurationId, page, pageSize)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetServiceConfigurationByServiceConfigId provides a mock function with given fields: serviceConfigId
func (_m *MockServiceConfigManagerApi) GetServiceConfigurationByServiceConfigId(serviceConfigId types.UUID) (*integration.MsxResponse, error) {
	ret := _m.Called(serviceConfigId)

	var r0 *integration.MsxResponse
	if rf, ok := ret.Get(0).(func(types.UUID) *integration.MsxResponse); ok {
		r0 = rf(serviceConfigId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*integration.MsxResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(types.UUID) error); ok {
		r1 = rf(serviceConfigId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetServiceConfigurations provides a mock function with given fields: page, pageSize
func (_m *MockServiceConfigManagerApi) GetServiceConfigurations(page int, pageSize int) (*integration.MsxResponse, error) {
	ret := _m.Called(page, pageSize)

	var r0 *integration.MsxResponse
	if rf, ok := ret.Get(0).(func(int, int) *integration.MsxResponse); ok {
		r0 = rf(page, pageSize)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*integration.MsxResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(page, pageSize)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetServiceConfigurationsByFilter provides a mock function with given fields: filter, page, pageSize
func (_m *MockServiceConfigManagerApi) GetServiceConfigurationsByFilter(filter ServiceConfigurationSearchFilter, page int, pageSize int) (*integration.MsxResponse, error) {
	ret := _m.Called(filter, page, pageSize)

	var r0 *integration.MsxResponse
	if rf, ok := ret.Get(0).(func(ServiceConfigurationSearchFilter, int, int) *integration.MsxResponse); ok {
		r0 = rf(filter, page, pageSize)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*integration.MsxResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(ServiceConfigurationSearchFilter, int, int) error); ok {
		r1 = rf(filter, page, pageSize)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTenantAssignmentsByServiceConfigurationId provides a mock function with given fields: serviceConfigurationId
func (_m *MockServiceConfigManagerApi) GetTenantAssignmentsByServiceConfigurationId(serviceConfigurationId types.UUID) (*integration.MsxResponse, error) {
	ret := _m.Called(serviceConfigurationId)

	var r0 *integration.MsxResponse
	if rf, ok := ret.Get(0).(func(types.UUID) *integration.MsxResponse); ok {
		r0 = rf(serviceConfigurationId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*integration.MsxResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(types.UUID) error); ok {
		r1 = rf(serviceConfigurationId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateServiceConfiguration provides a mock function with given fields: configuration
func (_m *MockServiceConfigManagerApi) UpdateServiceConfiguration(configuration ServiceConfigurationUpdateRequest) (*integration.MsxResponse, error) {
	ret := _m.Called(configuration)

	var r0 *integration.MsxResponse
	if rf, ok := ret.Get(0).(func(ServiceConfigurationUpdateRequest) *integration.MsxResponse); ok {
		r0 = rf(configuration)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*integration.MsxResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(ServiceConfigurationUpdateRequest) error); ok {
		r1 = rf(configuration)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateServiceConfigurationApplicationStatus provides a mock function with given fields: applicationId, serviceConfigId, applicationStatusUpdateRequest
func (_m *MockServiceConfigManagerApi) UpdateServiceConfigurationApplicationStatus(applicationId types.UUID, serviceConfigId types.UUID, applicationStatusUpdateRequest ServiceConfigurationApplicationStatusUpdateRequest) (*integration.MsxResponse, error) {
	ret := _m.Called(applicationId, serviceConfigId, applicationStatusUpdateRequest)

	var r0 *integration.MsxResponse
	if rf, ok := ret.Get(0).(func(types.UUID, types.UUID, ServiceConfigurationApplicationStatusUpdateRequest) *integration.MsxResponse); ok {
		r0 = rf(applicationId, serviceConfigId, applicationStatusUpdateRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*integration.MsxResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(types.UUID, types.UUID, ServiceConfigurationApplicationStatusUpdateRequest) error); ok {
		r1 = rf(applicationId, serviceConfigId, applicationStatusUpdateRequest)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateServiceConfigurationAssignmentStatusByServiceConfigurationIdAndTenantId provides a mock function with given fields: serviceConfigId, tenantId, status
func (_m *MockServiceConfigManagerApi) UpdateServiceConfigurationAssignmentStatusByServiceConfigurationIdAndTenantId(serviceConfigId types.UUID, tenantId types.UUID, status StatusUpdateRequest) (*integration.MsxResponse, error) {
	ret := _m.Called(serviceConfigId, tenantId, status)

	var r0 *integration.MsxResponse
	if rf, ok := ret.Get(0).(func(types.UUID, types.UUID, StatusUpdateRequest) *integration.MsxResponse); ok {
		r0 = rf(serviceConfigId, tenantId, status)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*integration.MsxResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(types.UUID, types.UUID, StatusUpdateRequest) error); ok {
		r1 = rf(serviceConfigId, tenantId, status)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateServiceConfigurationStatus provides a mock function with given fields: serviceConfigId, serviceConfigurationStatus
func (_m *MockServiceConfigManagerApi) UpdateServiceConfigurationStatus(serviceConfigId types.UUID, serviceConfigurationStatus StatusUpdateRequest) (*integration.MsxResponse, error) {
	ret := _m.Called(serviceConfigId, serviceConfigurationStatus)

	var r0 *integration.MsxResponse
	if rf, ok := ret.Get(0).(func(types.UUID, StatusUpdateRequest) *integration.MsxResponse); ok {
		r0 = rf(serviceConfigId, serviceConfigurationStatus)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*integration.MsxResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(types.UUID, StatusUpdateRequest) error); ok {
		r1 = rf(serviceConfigId, serviceConfigurationStatus)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewMockServiceConfigManagerApi interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockServiceConfigManagerApi creates a new instance of MockServiceConfigManagerApi. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockServiceConfigManagerApi(t mockConstructorTestingTNewMockServiceConfigManagerApi) *MockServiceConfigManagerApi {
	mock := &MockServiceConfigManagerApi{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
