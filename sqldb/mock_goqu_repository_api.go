// Code generated by mockery v2.22.1. DO NOT EDIT.

package sqldb

import (
	context "context"

	goqu "github.com/doug-martin/goqu/v9"
	mock "github.com/stretchr/testify/mock"
)

// MockGoquRepositoryApi is an autogenerated mock type for the GoquRepositoryApi type
type MockGoquRepositoryApi struct {
	mock.Mock
}

type MockGoquRepositoryApi_Expecter struct {
	mock *mock.Mock
}

func (_m *MockGoquRepositoryApi) EXPECT() *MockGoquRepositoryApi_Expecter {
	return &MockGoquRepositoryApi_Expecter{mock: &_m.Mock}
}

// Delete provides a mock function with given fields: table
func (_m *MockGoquRepositoryApi) Delete(table string) *goqu.DeleteDataset {
	ret := _m.Called(table)

	var r0 *goqu.DeleteDataset
	if rf, ok := ret.Get(0).(func(string) *goqu.DeleteDataset); ok {
		r0 = rf(table)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*goqu.DeleteDataset)
		}
	}

	return r0
}

// MockGoquRepositoryApi_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockGoquRepositoryApi_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - table string
func (_e *MockGoquRepositoryApi_Expecter) Delete(table interface{}) *MockGoquRepositoryApi_Delete_Call {
	return &MockGoquRepositoryApi_Delete_Call{Call: _e.mock.On("Delete", table)}
}

func (_c *MockGoquRepositoryApi_Delete_Call) Run(run func(table string)) *MockGoquRepositoryApi_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockGoquRepositoryApi_Delete_Call) Return(_a0 *goqu.DeleteDataset) *MockGoquRepositoryApi_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockGoquRepositoryApi_Delete_Call) RunAndReturn(run func(string) *goqu.DeleteDataset) *MockGoquRepositoryApi_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// ExecuteDelete provides a mock function with given fields: ctx, ds
func (_m *MockGoquRepositoryApi) ExecuteDelete(ctx context.Context, ds *goqu.DeleteDataset) error {
	ret := _m.Called(ctx, ds)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *goqu.DeleteDataset) error); ok {
		r0 = rf(ctx, ds)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockGoquRepositoryApi_ExecuteDelete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExecuteDelete'
type MockGoquRepositoryApi_ExecuteDelete_Call struct {
	*mock.Call
}

// ExecuteDelete is a helper method to define mock.On call
//   - ctx context.Context
//   - ds *goqu.DeleteDataset
func (_e *MockGoquRepositoryApi_Expecter) ExecuteDelete(ctx interface{}, ds interface{}) *MockGoquRepositoryApi_ExecuteDelete_Call {
	return &MockGoquRepositoryApi_ExecuteDelete_Call{Call: _e.mock.On("ExecuteDelete", ctx, ds)}
}

func (_c *MockGoquRepositoryApi_ExecuteDelete_Call) Run(run func(ctx context.Context, ds *goqu.DeleteDataset)) *MockGoquRepositoryApi_ExecuteDelete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*goqu.DeleteDataset))
	})
	return _c
}

func (_c *MockGoquRepositoryApi_ExecuteDelete_Call) Return(_a0 error) *MockGoquRepositoryApi_ExecuteDelete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockGoquRepositoryApi_ExecuteDelete_Call) RunAndReturn(run func(context.Context, *goqu.DeleteDataset) error) *MockGoquRepositoryApi_ExecuteDelete_Call {
	_c.Call.Return(run)
	return _c
}

// ExecuteGet provides a mock function with given fields: ctx, ds, dest
func (_m *MockGoquRepositoryApi) ExecuteGet(ctx context.Context, ds *goqu.SelectDataset, dest interface{}) error {
	ret := _m.Called(ctx, ds, dest)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *goqu.SelectDataset, interface{}) error); ok {
		r0 = rf(ctx, ds, dest)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockGoquRepositoryApi_ExecuteGet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExecuteGet'
type MockGoquRepositoryApi_ExecuteGet_Call struct {
	*mock.Call
}

// ExecuteGet is a helper method to define mock.On call
//   - ctx context.Context
//   - ds *goqu.SelectDataset
//   - dest interface{}
func (_e *MockGoquRepositoryApi_Expecter) ExecuteGet(ctx interface{}, ds interface{}, dest interface{}) *MockGoquRepositoryApi_ExecuteGet_Call {
	return &MockGoquRepositoryApi_ExecuteGet_Call{Call: _e.mock.On("ExecuteGet", ctx, ds, dest)}
}

func (_c *MockGoquRepositoryApi_ExecuteGet_Call) Run(run func(ctx context.Context, ds *goqu.SelectDataset, dest interface{})) *MockGoquRepositoryApi_ExecuteGet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*goqu.SelectDataset), args[2].(interface{}))
	})
	return _c
}

func (_c *MockGoquRepositoryApi_ExecuteGet_Call) Return(_a0 error) *MockGoquRepositoryApi_ExecuteGet_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockGoquRepositoryApi_ExecuteGet_Call) RunAndReturn(run func(context.Context, *goqu.SelectDataset, interface{}) error) *MockGoquRepositoryApi_ExecuteGet_Call {
	_c.Call.Return(run)
	return _c
}

// ExecuteInsert provides a mock function with given fields: ctx, ds
func (_m *MockGoquRepositoryApi) ExecuteInsert(ctx context.Context, ds *goqu.InsertDataset) error {
	ret := _m.Called(ctx, ds)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *goqu.InsertDataset) error); ok {
		r0 = rf(ctx, ds)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockGoquRepositoryApi_ExecuteInsert_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExecuteInsert'
type MockGoquRepositoryApi_ExecuteInsert_Call struct {
	*mock.Call
}

// ExecuteInsert is a helper method to define mock.On call
//   - ctx context.Context
//   - ds *goqu.InsertDataset
func (_e *MockGoquRepositoryApi_Expecter) ExecuteInsert(ctx interface{}, ds interface{}) *MockGoquRepositoryApi_ExecuteInsert_Call {
	return &MockGoquRepositoryApi_ExecuteInsert_Call{Call: _e.mock.On("ExecuteInsert", ctx, ds)}
}

func (_c *MockGoquRepositoryApi_ExecuteInsert_Call) Run(run func(ctx context.Context, ds *goqu.InsertDataset)) *MockGoquRepositoryApi_ExecuteInsert_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*goqu.InsertDataset))
	})
	return _c
}

func (_c *MockGoquRepositoryApi_ExecuteInsert_Call) Return(_a0 error) *MockGoquRepositoryApi_ExecuteInsert_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockGoquRepositoryApi_ExecuteInsert_Call) RunAndReturn(run func(context.Context, *goqu.InsertDataset) error) *MockGoquRepositoryApi_ExecuteInsert_Call {
	_c.Call.Return(run)
	return _c
}

// ExecuteSelect provides a mock function with given fields: ctx, ds, dest
func (_m *MockGoquRepositoryApi) ExecuteSelect(ctx context.Context, ds *goqu.SelectDataset, dest interface{}) error {
	ret := _m.Called(ctx, ds, dest)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *goqu.SelectDataset, interface{}) error); ok {
		r0 = rf(ctx, ds, dest)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockGoquRepositoryApi_ExecuteSelect_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExecuteSelect'
type MockGoquRepositoryApi_ExecuteSelect_Call struct {
	*mock.Call
}

// ExecuteSelect is a helper method to define mock.On call
//   - ctx context.Context
//   - ds *goqu.SelectDataset
//   - dest interface{}
func (_e *MockGoquRepositoryApi_Expecter) ExecuteSelect(ctx interface{}, ds interface{}, dest interface{}) *MockGoquRepositoryApi_ExecuteSelect_Call {
	return &MockGoquRepositoryApi_ExecuteSelect_Call{Call: _e.mock.On("ExecuteSelect", ctx, ds, dest)}
}

func (_c *MockGoquRepositoryApi_ExecuteSelect_Call) Run(run func(ctx context.Context, ds *goqu.SelectDataset, dest interface{})) *MockGoquRepositoryApi_ExecuteSelect_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*goqu.SelectDataset), args[2].(interface{}))
	})
	return _c
}

func (_c *MockGoquRepositoryApi_ExecuteSelect_Call) Return(_a0 error) *MockGoquRepositoryApi_ExecuteSelect_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockGoquRepositoryApi_ExecuteSelect_Call) RunAndReturn(run func(context.Context, *goqu.SelectDataset, interface{}) error) *MockGoquRepositoryApi_ExecuteSelect_Call {
	_c.Call.Return(run)
	return _c
}

// ExecuteTruncate provides a mock function with given fields: ctx, ds
func (_m *MockGoquRepositoryApi) ExecuteTruncate(ctx context.Context, ds *goqu.TruncateDataset) error {
	ret := _m.Called(ctx, ds)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *goqu.TruncateDataset) error); ok {
		r0 = rf(ctx, ds)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockGoquRepositoryApi_ExecuteTruncate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExecuteTruncate'
type MockGoquRepositoryApi_ExecuteTruncate_Call struct {
	*mock.Call
}

// ExecuteTruncate is a helper method to define mock.On call
//   - ctx context.Context
//   - ds *goqu.TruncateDataset
func (_e *MockGoquRepositoryApi_Expecter) ExecuteTruncate(ctx interface{}, ds interface{}) *MockGoquRepositoryApi_ExecuteTruncate_Call {
	return &MockGoquRepositoryApi_ExecuteTruncate_Call{Call: _e.mock.On("ExecuteTruncate", ctx, ds)}
}

func (_c *MockGoquRepositoryApi_ExecuteTruncate_Call) Run(run func(ctx context.Context, ds *goqu.TruncateDataset)) *MockGoquRepositoryApi_ExecuteTruncate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*goqu.TruncateDataset))
	})
	return _c
}

func (_c *MockGoquRepositoryApi_ExecuteTruncate_Call) Return(_a0 error) *MockGoquRepositoryApi_ExecuteTruncate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockGoquRepositoryApi_ExecuteTruncate_Call) RunAndReturn(run func(context.Context, *goqu.TruncateDataset) error) *MockGoquRepositoryApi_ExecuteTruncate_Call {
	_c.Call.Return(run)
	return _c
}

// ExecuteUpdate provides a mock function with given fields: ctx, ds
func (_m *MockGoquRepositoryApi) ExecuteUpdate(ctx context.Context, ds *goqu.UpdateDataset) error {
	ret := _m.Called(ctx, ds)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *goqu.UpdateDataset) error); ok {
		r0 = rf(ctx, ds)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockGoquRepositoryApi_ExecuteUpdate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExecuteUpdate'
type MockGoquRepositoryApi_ExecuteUpdate_Call struct {
	*mock.Call
}

// ExecuteUpdate is a helper method to define mock.On call
//   - ctx context.Context
//   - ds *goqu.UpdateDataset
func (_e *MockGoquRepositoryApi_Expecter) ExecuteUpdate(ctx interface{}, ds interface{}) *MockGoquRepositoryApi_ExecuteUpdate_Call {
	return &MockGoquRepositoryApi_ExecuteUpdate_Call{Call: _e.mock.On("ExecuteUpdate", ctx, ds)}
}

func (_c *MockGoquRepositoryApi_ExecuteUpdate_Call) Run(run func(ctx context.Context, ds *goqu.UpdateDataset)) *MockGoquRepositoryApi_ExecuteUpdate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*goqu.UpdateDataset))
	})
	return _c
}

func (_c *MockGoquRepositoryApi_ExecuteUpdate_Call) Return(_a0 error) *MockGoquRepositoryApi_ExecuteUpdate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockGoquRepositoryApi_ExecuteUpdate_Call) RunAndReturn(run func(context.Context, *goqu.UpdateDataset) error) *MockGoquRepositoryApi_ExecuteUpdate_Call {
	_c.Call.Return(run)
	return _c
}

// ExecuteUpsert provides a mock function with given fields: ctx, ds
func (_m *MockGoquRepositoryApi) ExecuteUpsert(ctx context.Context, ds *goqu.InsertDataset) error {
	ret := _m.Called(ctx, ds)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *goqu.InsertDataset) error); ok {
		r0 = rf(ctx, ds)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockGoquRepositoryApi_ExecuteUpsert_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExecuteUpsert'
type MockGoquRepositoryApi_ExecuteUpsert_Call struct {
	*mock.Call
}

// ExecuteUpsert is a helper method to define mock.On call
//   - ctx context.Context
//   - ds *goqu.InsertDataset
func (_e *MockGoquRepositoryApi_Expecter) ExecuteUpsert(ctx interface{}, ds interface{}) *MockGoquRepositoryApi_ExecuteUpsert_Call {
	return &MockGoquRepositoryApi_ExecuteUpsert_Call{Call: _e.mock.On("ExecuteUpsert", ctx, ds)}
}

func (_c *MockGoquRepositoryApi_ExecuteUpsert_Call) Run(run func(ctx context.Context, ds *goqu.InsertDataset)) *MockGoquRepositoryApi_ExecuteUpsert_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*goqu.InsertDataset))
	})
	return _c
}

func (_c *MockGoquRepositoryApi_ExecuteUpsert_Call) Return(_a0 error) *MockGoquRepositoryApi_ExecuteUpsert_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockGoquRepositoryApi_ExecuteUpsert_Call) RunAndReturn(run func(context.Context, *goqu.InsertDataset) error) *MockGoquRepositoryApi_ExecuteUpsert_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: table
func (_m *MockGoquRepositoryApi) Get(table string) *goqu.SelectDataset {
	ret := _m.Called(table)

	var r0 *goqu.SelectDataset
	if rf, ok := ret.Get(0).(func(string) *goqu.SelectDataset); ok {
		r0 = rf(table)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*goqu.SelectDataset)
		}
	}

	return r0
}

// MockGoquRepositoryApi_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockGoquRepositoryApi_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - table string
func (_e *MockGoquRepositoryApi_Expecter) Get(table interface{}) *MockGoquRepositoryApi_Get_Call {
	return &MockGoquRepositoryApi_Get_Call{Call: _e.mock.On("Get", table)}
}

func (_c *MockGoquRepositoryApi_Get_Call) Run(run func(table string)) *MockGoquRepositoryApi_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockGoquRepositoryApi_Get_Call) Return(_a0 *goqu.SelectDataset) *MockGoquRepositoryApi_Get_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockGoquRepositoryApi_Get_Call) RunAndReturn(run func(string) *goqu.SelectDataset) *MockGoquRepositoryApi_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Insert provides a mock function with given fields: table
func (_m *MockGoquRepositoryApi) Insert(table string) *goqu.InsertDataset {
	ret := _m.Called(table)

	var r0 *goqu.InsertDataset
	if rf, ok := ret.Get(0).(func(string) *goqu.InsertDataset); ok {
		r0 = rf(table)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*goqu.InsertDataset)
		}
	}

	return r0
}

// MockGoquRepositoryApi_Insert_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Insert'
type MockGoquRepositoryApi_Insert_Call struct {
	*mock.Call
}

// Insert is a helper method to define mock.On call
//   - table string
func (_e *MockGoquRepositoryApi_Expecter) Insert(table interface{}) *MockGoquRepositoryApi_Insert_Call {
	return &MockGoquRepositoryApi_Insert_Call{Call: _e.mock.On("Insert", table)}
}

func (_c *MockGoquRepositoryApi_Insert_Call) Run(run func(table string)) *MockGoquRepositoryApi_Insert_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockGoquRepositoryApi_Insert_Call) Return(_a0 *goqu.InsertDataset) *MockGoquRepositoryApi_Insert_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockGoquRepositoryApi_Insert_Call) RunAndReturn(run func(string) *goqu.InsertDataset) *MockGoquRepositoryApi_Insert_Call {
	_c.Call.Return(run)
	return _c
}

// Select provides a mock function with given fields: table
func (_m *MockGoquRepositoryApi) Select(table string) *goqu.SelectDataset {
	ret := _m.Called(table)

	var r0 *goqu.SelectDataset
	if rf, ok := ret.Get(0).(func(string) *goqu.SelectDataset); ok {
		r0 = rf(table)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*goqu.SelectDataset)
		}
	}

	return r0
}

// MockGoquRepositoryApi_Select_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Select'
type MockGoquRepositoryApi_Select_Call struct {
	*mock.Call
}

// Select is a helper method to define mock.On call
//   - table string
func (_e *MockGoquRepositoryApi_Expecter) Select(table interface{}) *MockGoquRepositoryApi_Select_Call {
	return &MockGoquRepositoryApi_Select_Call{Call: _e.mock.On("Select", table)}
}

func (_c *MockGoquRepositoryApi_Select_Call) Run(run func(table string)) *MockGoquRepositoryApi_Select_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockGoquRepositoryApi_Select_Call) Return(_a0 *goqu.SelectDataset) *MockGoquRepositoryApi_Select_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockGoquRepositoryApi_Select_Call) RunAndReturn(run func(string) *goqu.SelectDataset) *MockGoquRepositoryApi_Select_Call {
	_c.Call.Return(run)
	return _c
}

// Truncate provides a mock function with given fields: table
func (_m *MockGoquRepositoryApi) Truncate(table string) *goqu.TruncateDataset {
	ret := _m.Called(table)

	var r0 *goqu.TruncateDataset
	if rf, ok := ret.Get(0).(func(string) *goqu.TruncateDataset); ok {
		r0 = rf(table)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*goqu.TruncateDataset)
		}
	}

	return r0
}

// MockGoquRepositoryApi_Truncate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Truncate'
type MockGoquRepositoryApi_Truncate_Call struct {
	*mock.Call
}

// Truncate is a helper method to define mock.On call
//   - table string
func (_e *MockGoquRepositoryApi_Expecter) Truncate(table interface{}) *MockGoquRepositoryApi_Truncate_Call {
	return &MockGoquRepositoryApi_Truncate_Call{Call: _e.mock.On("Truncate", table)}
}

func (_c *MockGoquRepositoryApi_Truncate_Call) Run(run func(table string)) *MockGoquRepositoryApi_Truncate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockGoquRepositoryApi_Truncate_Call) Return(_a0 *goqu.TruncateDataset) *MockGoquRepositoryApi_Truncate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockGoquRepositoryApi_Truncate_Call) RunAndReturn(run func(string) *goqu.TruncateDataset) *MockGoquRepositoryApi_Truncate_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: table
func (_m *MockGoquRepositoryApi) Update(table string) *goqu.UpdateDataset {
	ret := _m.Called(table)

	var r0 *goqu.UpdateDataset
	if rf, ok := ret.Get(0).(func(string) *goqu.UpdateDataset); ok {
		r0 = rf(table)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*goqu.UpdateDataset)
		}
	}

	return r0
}

// MockGoquRepositoryApi_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockGoquRepositoryApi_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - table string
func (_e *MockGoquRepositoryApi_Expecter) Update(table interface{}) *MockGoquRepositoryApi_Update_Call {
	return &MockGoquRepositoryApi_Update_Call{Call: _e.mock.On("Update", table)}
}

func (_c *MockGoquRepositoryApi_Update_Call) Run(run func(table string)) *MockGoquRepositoryApi_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockGoquRepositoryApi_Update_Call) Return(_a0 *goqu.UpdateDataset) *MockGoquRepositoryApi_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockGoquRepositoryApi_Update_Call) RunAndReturn(run func(string) *goqu.UpdateDataset) *MockGoquRepositoryApi_Update_Call {
	_c.Call.Return(run)
	return _c
}

// Upsert provides a mock function with given fields: table
func (_m *MockGoquRepositoryApi) Upsert(table string) *goqu.InsertDataset {
	ret := _m.Called(table)

	var r0 *goqu.InsertDataset
	if rf, ok := ret.Get(0).(func(string) *goqu.InsertDataset); ok {
		r0 = rf(table)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*goqu.InsertDataset)
		}
	}

	return r0
}

// MockGoquRepositoryApi_Upsert_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Upsert'
type MockGoquRepositoryApi_Upsert_Call struct {
	*mock.Call
}

// Upsert is a helper method to define mock.On call
//   - table string
func (_e *MockGoquRepositoryApi_Expecter) Upsert(table interface{}) *MockGoquRepositoryApi_Upsert_Call {
	return &MockGoquRepositoryApi_Upsert_Call{Call: _e.mock.On("Upsert", table)}
}

func (_c *MockGoquRepositoryApi_Upsert_Call) Run(run func(table string)) *MockGoquRepositoryApi_Upsert_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockGoquRepositoryApi_Upsert_Call) Return(_a0 *goqu.InsertDataset) *MockGoquRepositoryApi_Upsert_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockGoquRepositoryApi_Upsert_Call) RunAndReturn(run func(string) *goqu.InsertDataset) *MockGoquRepositoryApi_Upsert_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewMockGoquRepositoryApi interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockGoquRepositoryApi creates a new instance of MockGoquRepositoryApi. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockGoquRepositoryApi(t mockConstructorTestingTNewMockGoquRepositoryApi) *MockGoquRepositoryApi {
	mock := &MockGoquRepositoryApi{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
