// Code generated by mockery v2.14.0. DO NOT EDIT.

package stream

import (
	message "github.com/ThreeDotsLabs/watermill/message"
	mock "github.com/stretchr/testify/mock"
)

// MockMessagePublisher is an autogenerated mock type for the MessagePublisher type
type MockMessagePublisher struct {
	mock.Mock
}

// Close provides a mock function with given fields:
func (_m *MockMessagePublisher) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Publish provides a mock function with given fields: topic, messages
func (_m *MockMessagePublisher) Publish(topic string, messages ...*message.Message) error {
	_va := make([]interface{}, len(messages))
	for _i := range messages {
		_va[_i] = messages[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, topic)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, ...*message.Message) error); ok {
		r0 = rf(topic, messages...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewMockMessagePublisher interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockMessagePublisher creates a new instance of MockMessagePublisher. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockMessagePublisher(t mockConstructorTestingTNewMockMessagePublisher) *MockMessagePublisher {
	mock := &MockMessagePublisher{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
