// Code generated by mockery v2.14.0. DO NOT EDIT.

package stream

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockPublisherService is an autogenerated mock type for the PublisherService type
type MockPublisherService struct {
	mock.Mock
}

// Publish provides a mock function with given fields: ctx, topic, payload, metadata
func (_m *MockPublisherService) Publish(ctx context.Context, topic string, payload []byte, metadata map[string]string) error {
	ret := _m.Called(ctx, topic, payload, metadata)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []byte, map[string]string) error); ok {
		r0 = rf(ctx, topic, payload, metadata)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PublishObject provides a mock function with given fields: ctx, topic, payload, metadata
func (_m *MockPublisherService) PublishObject(ctx context.Context, topic string, payload interface{}, metadata map[string]string) error {
	ret := _m.Called(ctx, topic, payload, metadata)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}, map[string]string) error); ok {
		r0 = rf(ctx, topic, payload, metadata)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewMockPublisherService interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockPublisherService creates a new instance of MockPublisherService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockPublisherService(t mockConstructorTestingTNewMockPublisherService) *MockPublisherService {
	mock := &MockPublisherService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
