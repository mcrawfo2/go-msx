// Code generated by mockery v2.22.1. DO NOT EDIT.

package stream

import (
	context "context"

	message "github.com/ThreeDotsLabs/watermill/message"
	mock "github.com/stretchr/testify/mock"
)

// MockSubscriber is an autogenerated mock type for the Subscriber type
type MockSubscriber struct {
	mock.Mock
}

// Close provides a mock function with given fields:
func (_m *MockSubscriber) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Subscribe provides a mock function with given fields: ctx, topic
func (_m *MockSubscriber) Subscribe(ctx context.Context, topic string) (<-chan *message.Message, error) {
	ret := _m.Called(ctx, topic)

	var r0 <-chan *message.Message
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (<-chan *message.Message, error)); ok {
		return rf(ctx, topic)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) <-chan *message.Message); ok {
		r0 = rf(ctx, topic)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan *message.Message)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, topic)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewMockSubscriber interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockSubscriber creates a new instance of MockSubscriber. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockSubscriber(t mockConstructorTestingTNewMockSubscriber) *MockSubscriber {
	mock := &MockSubscriber{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
