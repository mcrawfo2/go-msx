// Code generated by mockery v2.22.1. DO NOT EDIT.

package stream

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockProvider is an autogenerated mock type for the Provider type
type MockProvider struct {
	mock.Mock
}

// NewPublisher provides a mock function with given fields: ctx, name, configuration
func (_m *MockProvider) NewPublisher(ctx context.Context, name string, configuration *BindingConfiguration) (Publisher, error) {
	ret := _m.Called(ctx, name, configuration)

	var r0 Publisher
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *BindingConfiguration) (Publisher, error)); ok {
		return rf(ctx, name, configuration)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *BindingConfiguration) Publisher); ok {
		r0 = rf(ctx, name, configuration)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(Publisher)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *BindingConfiguration) error); ok {
		r1 = rf(ctx, name, configuration)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewSubscriber provides a mock function with given fields: ctx, name, configuration
func (_m *MockProvider) NewSubscriber(ctx context.Context, name string, configuration *BindingConfiguration) (Subscriber, error) {
	ret := _m.Called(ctx, name, configuration)

	var r0 Subscriber
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *BindingConfiguration) (Subscriber, error)); ok {
		return rf(ctx, name, configuration)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *BindingConfiguration) Subscriber); ok {
		r0 = rf(ctx, name, configuration)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(Subscriber)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *BindingConfiguration) error); ok {
		r1 = rf(ctx, name, configuration)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewMockProvider interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockProvider creates a new instance of MockProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockProvider(t mockConstructorTestingTNewMockProvider) *MockProvider {
	mock := &MockProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
